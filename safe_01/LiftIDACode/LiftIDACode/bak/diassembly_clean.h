uint64_t VMFunc(uint64_t Flag[4]) {
  uint64_t Stack[44];
  uint64_t StackPtr = 1;

  {    
    Stack[1] = Flag[0];
    Stack[2] = Flag[1];
    Stack[3] = Flag[2];  
    Stack[4] = Flag[3];    
		StackPtr = 5;
    if (((char *)Flag)[33] != 0)
      goto _WrongResult;

  Stack[StackPtr] = Stack[StackPtr - 4];
  Stack[StackPtr + 1] = DW_OP_pick(Stack, StackPtr + 1, 3);
  Stack[StackPtr + 2] = 0;
  StackPtr += 3;
  goto _Loop0Entry;
};

// 3 args = {Flag[0], Flag[1], 0}
_Loop0Entry : {
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  Stack[StackPtr] = 0;
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 6];
  StackPtr++; // DW_OP_pick(S3)
  Stack[StackPtr] = Stack[StackPtr - 6];
  StackPtr++;  // DW_OP_pick(S4)
  goto _Loop0; // DW_OP_skip 0x00000033 (0x0040030B)
};

// 2 Args (Flag[1], Flag[2])
// 22222233, 333333Z}
_Loop0 : {  
  StackPtr++;

  for (int i = 0; i < 4; i++) {
    uint64_t T;
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
    Stack[StackPtr] = Stack[StackPtr - 1] & 0x00000000FFFFFFFF;
    T = Stack[StackPtr];
    Stack[StackPtr] = Stack[StackPtr - 1];
    Stack[StackPtr - 1] = T;
    Stack[StackPtr] = (Stack[StackPtr] & 0xFFFFFFFF00000000) >> 0x20;
    StackPtr++;
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
    Stack[StackPtr] = Stack[StackPtr - 1] & 0x00000000FFFFFFFF;
    DW_OP_swap(Stack[StackPtr], Stack[StackPtr - 1]);
    Stack[StackPtr] = (Stack[StackPtr] & 0xFFFFFFFF00000000) >> 0x20;
    Stack[StackPtr + 1] = Stack[StackPtr];
    StackPtr += 2;
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
    Stack[StackPtr] = Stack[StackPtr - 5];;
    StackPtr -= 1;
    Stack[StackPtr - 1] =
        (Stack[StackPtr - 1] ^ (Stack[StackPtr] + Stack[StackPtr + 1])) &
        0xFFFFFFFF;
    DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
    Stack[StackPtr] = Stack[StackPtr - 4];
    Stack[StackPtr - 1] = Stack[StackPtr - 1] & Stack[StackPtr];
    DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
    Stack[StackPtr] = Stack[StackPtr - 1];
    StackPtr++;
    Stack[StackPtr] = Stack[StackPtr - 5];;
    StackPtr++; // DW_OP_pick(S10)
    DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
    StackPtr -= 2;
    Stack[StackPtr] = (Stack[StackPtr] - Stack[StackPtr + 1]) & 0xFFFFFFFF;
    StackPtr++;
    DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);    

		// Get table
    auto TablePtr = ((Stack[StackPtr - 4] & 0xFF) << 0x02) + 0x4006B4;
    Stack[StackPtr] = DW_OP_deref_size(4, TablePtr); // 0x400 table (0x4006B4 - 0x4010B4)

    StackPtr -= 1;
    Stack[StackPtr] = Stack[StackPtr] + Stack[StackPtr + 1];
    Stack[StackPtr] = Stack[StackPtr] & 0xFFFFFFFF;
    StackPtr++;
    Stack[StackPtr] = Stack[StackPtr - 1];    
    Stack[StackPtr + 1] = Stack[StackPtr - 4] >> 0x08;    
    Stack[StackPtr] = Stack[StackPtr] ^ Stack[StackPtr + 1];
    StackPtr++;
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
    DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
    StackPtr -= 1;
    Stack[StackPtr] = Stack[StackPtr] << 0x20;    
    Stack[StackPtr - 1] = Stack[StackPtr - 1] | Stack[StackPtr];    
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
    DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
    StackPtr -= 1;
    Stack[StackPtr] = Stack[StackPtr] << 0x20;   
    Stack[StackPtr - 1] = Stack[StackPtr - 1] | Stack[StackPtr ];    
    DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
    StackPtr--; // DW_OP_drop(&StackPtr);
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
    StackPtr--; // DW_OP_drop(&StackPtr);
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
    DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  }
  StackPtr--; // DW_OP_drop(&StackPtr);
  Stack[StackPtr] = Stack[StackPtr - 3];
	if (Stack[StackPtr] != 0) {	
		Stack[StackPtr] = Stack[StackPtr - 8];
		StackPtr++; // DW_OP_pick(S3)
		Stack[StackPtr] = Stack[StackPtr - 8];
		StackPtr++;     // DW_OP_pick(S4)		
	}
	else {
		Stack[StackPtr] = Stack[StackPtr - 5];;
		StackPtr++; // DW_OP_pick(S6)
		Stack[StackPtr] = Stack[StackPtr - 5];;
		StackPtr++;     // DW_OP_pick(S7)
	}
	
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	Stack[StackPtr] = 0;
	StackPtr++;
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	goto _004003AC;	
};

_004004EA : {
  Stack[StackPtr] = Stack[StackPtr - 1];  

	auto TablePtr = (Stack[StackPtr] * 8) + 0x400648; // [0-5]
  Stack[StackPtr] = DW_OP_deref_size(4, TablePtr);

  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  StackPtr -= 2;  
  Stack[StackPtr] = DW_OP_and((Stack[StackPtr] + Stack[StackPtr + 1]), 0xFFFFFFFF);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  StackPtr -= 1;
  Stack[StackPtr-1] = (Stack[StackPtr-1] ^ Stack[StackPtr]);  
	Stack[StackPtr] = Stack[StackPtr - 2];    

  TablePtr = ((((Stack[StackPtr] * 2) + 1) * 4) +  0x0000000000400648); //[0-5]
  Stack[StackPtr] = DW_OP_deref(TablePtr);

  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 4];  
  StackPtr -= 1;  
  Stack[StackPtr] = ((Stack[StackPtr] ^ Stack[StackPtr + 1]) << 0x20);
  StackPtr -= 1;
  Stack[StackPtr] = (Stack[StackPtr] | Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  StackPtr--; // DW_OP_drop(&StackPtr);
  Stack[StackPtr] = Stack[StackPtr - 1];  
  Stack[StackPtr] = (Stack[StackPtr] & 0x00000000FFFFFFFF);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);    
  Stack[StackPtr - 1] = DW_OP_shr((Stack[StackPtr - 1] & 0xFFFFFFFF00000000), 0x20);  
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  Stack[StackPtr] = Stack[StackPtr - 3];
  StackPtr++; // DW_OP_pick(S17)
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);      
  Stack[StackPtr - 1] = (Stack[StackPtr - 1] + 1);  
  Stack[StackPtr] = Stack[StackPtr - 1];  
  Stack[StackPtr] = (Stack[StackPtr] -  6);
  if (Stack[StackPtr] != 0)
    goto _004004EA;

  StackPtr--; // DW_OP_drop(&StackPtr);
  StackPtr--; // DW_OP_drop(&StackPtr);
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  StackPtr--;
  if (Stack[StackPtr] == 0)
    goto _00400556;
  Stack[StackPtr] = Stack[StackPtr - 5];;
  StackPtr++; // DW_OP_pick(S13)
  Stack[StackPtr] = (Stack[StackPtr - 1] & 0x00000000FFFFFFFF);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr - 1] =
      DW_OP_shr((Stack[StackPtr - 1] & 0xFFFFFFFF00000000), 0x20);
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = Stack[StackPtr - 3];
  StackPtr++; // DW_OP_pick(S17)
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];  
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x1A);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);  
  StackPtr -= 1;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x06);
  StackPtr -= 1;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);  
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = Stack[StackPtr - 4];  
  StackPtr -= 1;
  Stack[StackPtr] = (Stack[StackPtr] ^ Stack[StackPtr + 1]);  
  Stack[StackPtr + 1] = Stack[StackPtr - 2];    
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x0E);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);  
  StackPtr -= 1;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x12);
  StackPtr -= 1;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
  StackPtr++;
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  StackPtr--; // DW_OP_drop(&StackPtr);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  StackPtr--; // DW_OP_drop(&StackPtr);  
  StackPtr -= 1;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x20);
  StackPtr -= 1;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr -= 1;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  StackPtr--; // DW_OP_drop(&StackPtr);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  Stack[StackPtr - 1] = DW_OP_plus(Stack[StackPtr - 1], 1);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = Stack[StackPtr - 3];
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], 15);
  if (Stack[StackPtr] != 0)
    goto _004003AC;

  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  StackPtr--; // DW_OP_drop(&StackPtr);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  StackPtr--; // DW_OP_drop(&StackPtr);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  StackPtr--; // DW_OP_drop(&StackPtr);
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  StackPtr--;
	if (Stack[StackPtr] == 0) {	
		DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
		DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
		StackPtr--; // DW_OP_drop(&StackPtr);
		DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
		DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
		StackPtr--; // DW_OP_drop(&StackPtr);
		Stack[StackPtr] = 1;
		StackPtr++;
		Stack[StackPtr] = Stack[StackPtr - 3];
		StackPtr++; // DW_OP_pick(S7)
		Stack[StackPtr] = Stack[StackPtr - 3];
		StackPtr++;  // DW_OP_pick(S8)
		goto _Loop0; // DW_OP_skip 0x0000001E (0x0040030B)		
	}
    

  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  Stack[StackPtr] = Stack[StackPtr - 4];
  StackPtr++; // DW_OP_pick(S7)
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = Stack[StackPtr - 6];
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], 1);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  Stack[StackPtr] = Stack[StackPtr] - 4;
  if (Stack[StackPtr] != 0)
    goto _Loop0Entry;

	// Last calc
  auto T0 = Stack[StackPtr - 5];
  auto T1 = Stack[StackPtr - 4];

  uint64_t Arg0 = T1 ^ 0x658302A68E8E1C24;
  uint64_t Arg1 = T0 ^ 0xDC7564F1612E5347;
  uint64_t Arg2 = Stack[StackPtr - 2] ^ 0xD9C69B74A86EC613;
  uint64_t Arg3 = Stack[StackPtr - 3] ^ 0x65850B36E76AAED5;

  printf("%016llX\n", Arg0);
  printf("%016llX\n", Arg1);
  printf("%016llX\n", Arg2);
  printf("%016llX\n", Arg3);

  auto Result = (((Arg0) + (Arg1)) + (Arg2)) + (Arg3);
  if (Result != 0xd7783616ef60e415) {
    printf("WRONG RESULT!!!\n");
    goto _WrongResult;
  } else
    goto _ValidResult; // DW_OP_bra 0x0000000C (0x004002B6, 0x004002C2)
};

_ValidResult : {
  return 0x0000000000403098;
  // goto _004082C1; // DW_OP_skip 0x00007FFF (0x004082C1)
};

_WrongResult : { return 0x00000000004030B8; };



_004003AC : {
  Stack[StackPtr] = Stack[StackPtr - 3];
  StackPtr++; // DW_OP_pick(S11)
  Stack[StackPtr] = Stack[StackPtr - 6];
  StackPtr++; // DW_OP_pick(S9)
  Stack[StackPtr] = Stack[StackPtr - 6];
  StackPtr++; // DW_OP_pick(S10)
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  Stack[StackPtr] = 0;
  StackPtr++;
  goto _004003B6;
};

_004003B6 : {
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  Stack[StackPtr] = Stack[StackPtr - 3];
  StackPtr++;     // DW_OP_pick(S15)
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = (Stack[StackPtr] & 0x00000000FFFFFFFF);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;	
	Stack[StackPtr] = ((Stack[StackPtr] & 0xFFFFFFFF00000000) >> 0x20);
	StackPtr++;
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = (Stack[StackPtr] & 0x00000000FFFFFFFF);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;

	Stack[StackPtr] = (Stack[StackPtr] & 0xFFFFFFFF00000000);	
	Stack[StackPtr] = (Stack[StackPtr] >> 0x20);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 5];

	auto TablePtr = ((Stack[StackPtr] * 4) + 0x400678);
	Stack[StackPtr] = DW_OP_deref_size(4, TablePtr); // 0x400678

	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 5];;	
	StackPtr -= 1;
	Stack[StackPtr] = (Stack[StackPtr] ^ Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 4];
	Stack[StackPtr] = (Stack[StackPtr] + 0x45786532);
	Stack[StackPtr] = (Stack[StackPtr] & 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 5];;
	StackPtr++; // DW_OP_pick(S19)
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 4];
	StackPtr++; // DW_OP_pick(S20)
	Stack[StackPtr] = Stack[StackPtr - 1];	
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x04);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1C);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 5];;
	StackPtr++; // DW_OP_pick(S21)
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 4];	
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0x80000000);
	if (Stack[StackPtr] != 0) {	
		Stack[StackPtr] = DW_OP_const4u(0x84653217);		
	}
	else {	
		Stack[StackPtr] = DW_OP_const4u(0x17246549);		
	}
		
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], 0xA571689F);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], 0xFF030018);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x02);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x06);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);		
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1A);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);	
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x02);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x1E);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x09);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x07);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x05);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);		
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1B);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x09);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x17);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x03);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x05);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1B);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x06);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x1A);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x03);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];	
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x02);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1E);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x09);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x09);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x17);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x03);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x03);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x1D);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x06);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1A);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x09);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x03);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x1D);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x06);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1A);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x03);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x09);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x17);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);	
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x06);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x1A);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x06);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);		
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x1A);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);	
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], 0xA571689F);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x0A);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x03);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x1D);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x06);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x1A);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x05);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1B);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);	
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);	
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], 0xFF030018);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], 0xD2105517);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x05);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1B);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], 0xD2105517);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x06);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1A);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], 0xA571689F);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x06);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1A);	
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x06);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1A);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x02);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x06);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x1A);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = DW_OP_const4u(0xA571689F);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x09);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x02);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x07);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x03);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], 0xA571689F);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x0A);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], 0xA571689F);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], 0x02);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x1E);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = 6;
	StackPtr++;
	goto _00400D7D;
	};



_004004E7 : {
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
  Stack[StackPtr] = 0;
  StackPtr++;
  goto _004004EA;
};

_00400556 : {
  Stack[StackPtr] = Stack[StackPtr - 5];;
  StackPtr++; // DW_OP_pick(S13)
  Stack[StackPtr] = Stack[StackPtr - 1];
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0x00000000FFFFFFFF);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr - 1] =
  DW_OP_shr((Stack[StackPtr - 1] & 0xFFFFFFFF00000000), 0x20);
	Stack[StackPtr] = Stack[StackPtr - 3];
	StackPtr++; // DW_OP_pick(S17)
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	Stack[StackPtr] = Stack[StackPtr - 4];
	StackPtr++; // DW_OP_pick(S16)
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = DW_OP_const1u(0x04);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	Stack[StackPtr] = DW_OP_const1u(0x1C);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 3];
	StackPtr++; // DW_OP_pick(S17)
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = DW_OP_const1u(0x12);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	Stack[StackPtr] = DW_OP_const1u(0x0E);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 4];
	StackPtr++; // DW_OP_pick(S16)
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--; // DW_OP_drop(&StackPtr);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--;     // DW_OP_drop(&StackPtr);
	Stack[StackPtr] = DW_OP_const1u(0x20);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--; // DW_OP_drop(&StackPtr);
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	Stack[StackPtr] = 1;
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = DW_OP_const8u(0x00000000FFFFFFFF);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	Stack[StackPtr] = DW_OP_const8u(0xFFFFFFFF00000000);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = DW_OP_const1u(0x20);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	goto _004004E7; // DW_OP_skip 0x000000AF (0x004004E7)
	};






_00400D7D : {
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x17);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x0A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1D);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x05);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1B);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFF030018);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFF030018);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1D);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x0A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_lit(01);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  StackPtr--;
  if (Stack[StackPtr] != 0)
    goto _00400D7D;
  StackPtr--; // DW_OP_drop(&StackPtr);
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFF030018);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x05);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1B);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x05);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1B);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1D);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x17);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x0A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFF030018);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x05);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1B);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFF030018);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x0A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x17);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x0A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x17);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1D);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x17);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x17);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1D);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x17);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x0A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x17);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x05);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1B);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFF030018);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x05);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1B);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x0A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x0A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x05);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1B);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x05);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1B);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x05);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1B);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1D);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x0A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x17);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFF030018);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x05);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1B);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFF030018);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1D);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFF030018);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x0A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x0A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFF030018);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x05);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1B);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x17);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFF030018);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x17);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x17);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFF030018);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x09);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1D);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x03);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xA571689F);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x06);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1A);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_plus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xD2105517);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x07);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = Stack[StackPtr - 1];
  StackPtr++;
  Stack[StackPtr] = DW_OP_const1u(0x02);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
  Stack[StackPtr] = DW_OP_const1u(0x1E);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  Stack[StackPtr] = DW_OP_const4u(0xFFFFFFFF);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_and(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
  StackPtr -= 2;
  Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
  StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 3];
	StackPtr++; // DW_OP_pick(S24)
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 4];
	StackPtr++; // DW_OP_pick(S23)
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_xor(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 5];;
	StackPtr++; // DW_OP_pick(S22)
	Stack[StackPtr] = Stack[StackPtr - 5];;
	StackPtr++; // DW_OP_pick(S23)
	Stack[StackPtr] = DW_OP_const1u(0x20);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	Stack[StackPtr] = DW_OP_const1u(0x20);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_shl(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	StackPtr -= 2;
	Stack[StackPtr] = DW_OP_or(Stack[StackPtr], Stack[StackPtr + 1]);
	StackPtr++;
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--; // DW_OP_drop(&StackPtr);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--; // DW_OP_drop(&StackPtr);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--; // DW_OP_drop(&StackPtr);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--; // DW_OP_drop(&StackPtr);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--; // DW_OP_drop(&StackPtr);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--; // DW_OP_drop(&StackPtr);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--; // DW_OP_drop(&StackPtr);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--; // DW_OP_drop(&StackPtr);
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--;     // DW_OP_drop(&StackPtr);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	Stack[StackPtr] = Stack[StackPtr - 1];
	StackPtr++;
	Stack[StackPtr] = Stack[StackPtr - 5];;
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_minus(Stack[StackPtr], Stack[StackPtr + 1]);
	if (Stack[StackPtr] != 0) {
		Stack[StackPtr - 1] = DW_OP_plus(Stack[StackPtr - 1], 1);
		goto _004003B6; // DW_OP_skip 0xFFFFFFE9 (0x004003B6)		
	}

	StackPtr--; // DW_OP_drop(&StackPtr);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	DW_OP_rot(Stack[StackPtr - 1], Stack[StackPtr - 2], Stack[StackPtr - 3]);
	StackPtr--; // DW_OP_drop(&StackPtr);
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	Stack[StackPtr] = Stack[StackPtr - 4];
	StackPtr++; // DW_OP_pick(S12)
	Stack[StackPtr] = 0;
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	Stack[StackPtr] = Stack[StackPtr - 1];
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0x00000000FFFFFFFF);
	StackPtr++;
	DW_OP_swap(Stack[StackPtr - 1], Stack[StackPtr - 2]);
	StackPtr -= 1;
	Stack[StackPtr] = DW_OP_and(Stack[StackPtr], 0xFFFFFFFF00000000);
	Stack[StackPtr] = DW_OP_shr(Stack[StackPtr], 0x20);
	StackPtr++;
	goto _004004E7; // DW_OP_skip 0x000000F5 (0x004004E7)
	};

};
