#include <stdint.h>
#include <emmintrin.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

const uint8_t Table_00400648[] =
{
		0xDE, 0xDD, 0x9D, 0x48, 0xF1, 0x90, 0x79, 0x06, 0xA9, 0x74, 0xBF, 0x95, 0xE7, 0x1E, 0x94, 0x77,
		0xE3, 0x80, 0x6D, 0x0E, 0x8B, 0xAF, 0xED, 0x2D, 0x42, 0xCD, 0x92, 0xFB, 0xC0, 0x67, 0xE8, 0xD0,
		0xFB, 0xA3, 0xB3, 0xF2, 0x47, 0xCE, 0x39, 0x6C, 0xE0, 0x99, 0x4F, 0xE7, 0x21, 0xF2, 0x24, 0x5A,
		0xEA, 0x8F, 0x37, 0xD6, 0xC4, 0xA8, 0x3C, 0xE2, 0xBC, 0xB1, 0xE3, 0x84, 0xBF, 0x10, 0x5E, 0xCE,
		0xDA, 0x64, 0xB3, 0xA2, 0xF0, 0x50, 0xF2, 0x41, 0x40, 0x70, 0xE9, 0x0F, 0x66, 0x52, 0xC0, 0x1C,
		0x4B, 0x7E, 0xF8, 0x16, 0xB7, 0x26, 0x5E, 0x51, 0xCB, 0x8D, 0xA4, 0xEE, 0xE4, 0x57, 0xB3, 0x62,
		0x41, 0x20, 0xBD, 0x39, 0x7A, 0x38, 0xCD, 0x72, 0x8B, 0xAC, 0x7A, 0xF3, 0x9B, 0xB3, 0x63, 0x59,
		0xDD, 0x5A, 0xF7, 0x30, 0xBC, 0xEC, 0x3F, 0x10, 0x7A, 0x2E, 0x39, 0x00, 0xDF, 0x7A, 0xDF, 0x35,
		0x13, 0xBD, 0x9A, 0xE1, 0x5C, 0xB3, 0xF8, 0xDA, 0x14, 0x82, 0x79, 0xF8, 0x05, 0x23, 0x0C, 0xB3,
		0xE9, 0x80, 0x79, 0x06, 0x40, 0xD9, 0x00, 0x69, 0x6F, 0x87, 0x5E, 0x03, 0x14, 0x70, 0x85, 0xA3,
		0x62, 0xE1, 0xC8, 0x56, 0x56, 0x8F, 0x74, 0xE9, 0x09, 0xE4, 0xD4, 0x91, 0x09, 0x5A, 0xC7, 0xDC,
		0x2F, 0xF5, 0x65, 0xAC, 0x07, 0xDD, 0x71, 0x85, 0xF6, 0xDC, 0x9E, 0x01, 0xEB, 0xF9, 0xCE, 0x51,
		0x7D, 0xB1, 0xB1, 0x1E, 0x6F, 0x44, 0xBE, 0x0A, 0xFE, 0x7C, 0x27, 0x3B, 0xBC, 0x69, 0x38, 0x84,
		0x98, 0xA2, 0x3E, 0xB2, 0x51, 0x6F, 0x29, 0x7C, 0x72, 0x99, 0x79, 0xCD, 0x64, 0x0A, 0x18, 0x62,
		0xD5, 0x52, 0xC0, 0x0A, 0x05, 0x62, 0x07, 0xF0, 0x93, 0x31, 0x18, 0x13, 0x94, 0xCB, 0x08, 0xB9,
		0x3C, 0xCD, 0xF4, 0x4B, 0x8A, 0xD4, 0xE5, 0xDE, 0x74, 0x9A, 0x4F, 0xF6, 0xD0, 0x15, 0x4A, 0xD6,
		0x34, 0xD4, 0xCA, 0xB2, 0x3B, 0x01, 0xE9, 0x64, 0xD2, 0xC1, 0x6C, 0xF4, 0xDB, 0xE9, 0x78, 0x9D,
		0x16, 0x92, 0x78, 0x11, 0xE6, 0x89, 0x56, 0x33, 0xDB, 0x7E, 0x4C, 0x07, 0x85, 0x61, 0xEB, 0xE6,
		0x0B, 0x17, 0x20, 0xD0, 0x15, 0xAA, 0x04, 0xF3, 0x9E, 0xB6, 0xF2, 0xBC, 0xEA, 0xD2, 0xB3, 0x4E,
		0x5C, 0x4D, 0x8D, 0xD7, 0xC4, 0xBF, 0xD2, 0x7E, 0xF3, 0xF0, 0xEB, 0x58, 0x3F, 0x1C, 0x59, 0x8B,
		0x6B, 0x1F, 0x04, 0xD3, 0x88, 0xAE, 0x5C, 0x00, 0x5C, 0x6F, 0x69, 0xBA, 0xDE, 0x8E, 0x6C, 0xC1,
		0x27, 0xBB, 0xBC, 0x9A, 0x77, 0x8D, 0xD7, 0x56, 0x20, 0x3E, 0x5B, 0x76, 0x2D, 0x21, 0x37, 0xCF,
		0xCF, 0x2D, 0x2E, 0x19, 0x06, 0x28, 0xAF, 0x8C, 0x5B, 0x57, 0x9A, 0xBC, 0xCE, 0x21, 0x64, 0x77,
		0xEB, 0xB9, 0x7F, 0x52, 0x40, 0x43, 0xF8, 0x69, 0xD7, 0x7B, 0xBC, 0xAD, 0x29, 0xC3, 0xF2, 0x73,
		0x7F, 0x8A, 0x7F, 0x73, 0xE4, 0xD3, 0x01, 0xE3, 0xB2, 0xBE, 0x7E, 0x05, 0x58, 0xB8, 0x59, 0x58,
		0x79, 0x19, 0xC4, 0x2C, 0x39, 0xA6, 0x69, 0xEC, 0x23, 0xD5, 0xB0, 0x53, 0x32, 0xF5, 0xA2, 0x39,
		0x5D, 0xE3, 0x29, 0x8B, 0x81, 0xCE, 0xE2, 0x44, 0x6D, 0xA1, 0x10, 0xCC, 0x58, 0xFF, 0xD9, 0x44,
		0x14, 0x2C, 0x10, 0x77, 0x7D, 0x81, 0x57, 0xFB, 0xC8, 0xC8, 0xF7, 0x3C, 0x8A, 0x86, 0x22, 0x12,
		0xD1, 0xD5, 0x73, 0x41, 0x32, 0xEE, 0x29, 0x35, 0x8E, 0xF5, 0x9D, 0x7A, 0xAC, 0x25, 0x35, 0x51,
		0xAC, 0x4B, 0x95, 0x81, 0xF5, 0xCC, 0x53, 0xCE, 0x28, 0x87, 0x16, 0x79, 0xF8, 0x60, 0xD6, 0xA2,
		0xCE, 0xC9, 0x0C, 0xF3, 0x76, 0x9C, 0xB8, 0xF0, 0xA9, 0xB3, 0x9F, 0x08, 0xA8, 0xDB, 0x19, 0xC9,
		0xC3, 0x4D, 0x9E, 0x1F, 0x0C, 0x4E, 0x59, 0xA2, 0x78, 0xE1, 0xFF, 0x34, 0xFB, 0x14, 0x44, 0xB0,
		0x3A, 0xB3, 0x1F, 0xD3, 0x78, 0x02, 0x4D, 0x18, 0x9A, 0x6A, 0x81, 0x2C, 0xF2, 0xF2, 0x93, 0xB9,
		0x1C, 0x60, 0xD8, 0xE4, 0xDE, 0xEE, 0xE2, 0x49, 0xE1, 0x0C, 0xD5, 0x9C, 0x77, 0x1E, 0x3E, 0xC0,
		0x9E, 0x86, 0x01, 0xA9, 0x50, 0xDE, 0x79, 0x75, 0xAB, 0xC4, 0x6A, 0x72, 0x40, 0x48, 0xD0, 0x38,
		0x70, 0x12, 0xBE, 0xEA, 0x2D, 0x81, 0x40, 0x8C, 0xB7, 0x76, 0x49, 0xE8, 0xAD, 0x04, 0x2B, 0x17,
		0xC4, 0x06, 0x66, 0x75, 0x91, 0x84, 0x25, 0x66, 0xF8, 0xBE, 0xA0, 0xB5, 0xF3, 0x5C, 0xCC, 0x6B,
		0x94, 0xAE, 0x35, 0xA5, 0xAA, 0x87, 0x7A, 0xC9, 0xF6, 0xA8, 0x03, 0x91, 0x5F, 0x9E, 0x3B, 0xCC,
		0x1F, 0xBE, 0x20, 0xBB, 0x97, 0xEF, 0xCF, 0xFF, 0x16, 0x4F, 0x95, 0x90, 0xA6, 0xE1, 0x1A, 0x50,
		0xCD, 0x89, 0xD5, 0x6E, 0x2B, 0xB0, 0x26, 0x68, 0x63, 0xF2, 0x5F, 0x56, 0x9B, 0x36, 0x8C, 0x8E,
		0x7A, 0xBE, 0x90, 0x69, 0x40, 0xB8, 0x25, 0x35, 0xBB, 0xD7, 0x47, 0x18, 0xC7, 0x40, 0x5A, 0x35,
		0x10, 0x9F, 0x57, 0xA3, 0xAE, 0xEC, 0xED, 0xE9, 0xB1, 0x7A, 0x33, 0xD0, 0xBA, 0xE5, 0x55, 0x63,
		0x55, 0x53, 0x97, 0x88, 0xCF, 0xF3, 0xC0, 0x5E, 0x3D, 0x21, 0xD6, 0xA0, 0x87, 0x93, 0x38, 0x75,
		0xF0, 0x16, 0x02, 0xE4, 0xE0, 0xCC, 0x80, 0xD9, 0x7C, 0xC6, 0x88, 0x6C, 0x9C, 0x41, 0x9D, 0x82,
		0x1B, 0x45, 0xF6, 0x3B, 0xFA, 0x7B, 0xF0, 0x11, 0x4E, 0x15, 0xC1, 0xC4, 0xEB, 0x35, 0x07, 0xBD,
		0x9D, 0xDF, 0xF8, 0x9C, 0x75, 0xBE, 0x57, 0xE4, 0x18, 0xBD, 0xA6, 0x63, 0xD3, 0x7F, 0xE7, 0xEF,
		0x63, 0x1B, 0x42, 0x83, 0x2D, 0x07, 0x83, 0x7F, 0x61, 0x0F, 0x94, 0x44, 0xF7, 0xCD, 0xBD, 0xF8,
		0xCA, 0x02, 0xC8, 0x61, 0xA8, 0xF9, 0x30, 0x0A, 0x37, 0x3B, 0xF0, 0x7F, 0xA9, 0xC5, 0x6C, 0xA2,
		0x0D, 0x57, 0x0E, 0xE1, 0x16, 0x0C, 0xEA, 0x95, 0x02, 0x6B, 0x5E, 0xA0, 0x84, 0x53, 0x1D, 0xC8,
		0x05, 0xDB, 0x85, 0x77, 0x5F, 0x4C, 0xC8, 0x92, 0x17, 0x46, 0x58, 0x05, 0x8D, 0xFE, 0xBC, 0x82,
		0xDA, 0xA1, 0x9E, 0x55, 0xB0, 0xCD, 0xD5, 0x4F, 0xED, 0x1F, 0x87, 0x9D, 0x39, 0x55, 0x6F, 0xDD,
		0x26, 0xEF, 0xD1, 0x4E, 0xC4, 0x13, 0x68, 0xFE, 0xD5, 0x71, 0xFA, 0x1C, 0xEA, 0x3A, 0x61, 0xD5,
		0x8C, 0x9B, 0x1C, 0x0F, 0x5D, 0xC4, 0xCA, 0x2B, 0x41, 0x0F, 0xD0, 0x65, 0xD8, 0xE0, 0x9B, 0x68,
		0x00, 0x11, 0xB0, 0x68, 0x80, 0xD2, 0x5B, 0x63, 0x4B, 0x5D, 0x4D, 0x95, 0x79, 0x7F, 0x88, 0x72,
		0x75, 0x7A, 0x02, 0xCE, 0x66, 0x1C, 0xF0, 0xFC, 0xD3, 0x1B, 0x6A, 0x00, 0x8E, 0x1C, 0x9A, 0x19,
		0x25, 0xEE, 0xD6, 0x87, 0x08, 0x9F, 0x8E, 0x93, 0x4D, 0x1D, 0xA1, 0xD8, 0x81, 0x4D, 0x9A, 0x2B,
		0xE5, 0xD2, 0xF5, 0xB6, 0x5A, 0x32, 0x5C, 0xD1, 0xC1, 0xAF, 0xEA, 0x64, 0x1C, 0xB6, 0x33, 0xFD,
		0x57, 0xBD, 0xC1, 0x43, 0x48, 0xF0, 0xB8, 0x37, 0xF2, 0x7C, 0xBA, 0x5C, 0xD0, 0x0C, 0x81, 0x72,
		0x54, 0xF4, 0xFE, 0xAB, 0xBA, 0x84, 0x63, 0xA7, 0x40, 0x14, 0x86, 0xD8, 0x37, 0x58, 0xDE, 0x36,
		0xF1, 0x03, 0x6A, 0x0F, 0xA1, 0x8F, 0xD4, 0x10, 0x2F, 0xEC, 0x83, 0x58, 0x9B, 0x0C, 0xC0, 0xA8,
		0xA4, 0xFE, 0x8F, 0x61, 0x06, 0xA2, 0x5D, 0xA0, 0x7A, 0xE9, 0xB9, 0xFF, 0x81, 0x67, 0x37, 0x8A,
		0x79, 0xB4, 0x56, 0x31, 0xCD, 0x5E, 0xAF, 0xE4, 0x6F, 0xE0, 0xD9, 0x87, 0x59, 0xD4, 0xD4, 0xB4,
		0x25, 0x7D, 0x9A, 0xEB, 0xAA, 0xFE, 0xDF, 0x59, 0x53, 0xF5, 0x8B, 0xDC, 0x3A, 0x3C, 0xCE, 0x6D,
		0x0E, 0x97, 0x62, 0x21, 0x9D, 0x92, 0xC9, 0xE8, 0xF4, 0x9B, 0x3A, 0x6C, 0x92, 0x53, 0xDA, 0x45,
		0xB0, 0xE7, 0xEE, 0x9C, 0xEB, 0xD4, 0x68, 0x3F, 0x4F, 0x43, 0x29, 0xCD, 0x12, 0xF7, 0x4D, 0x0E,
		0x9A, 0xC6, 0xA8, 0xB1, 0x46, 0x0F, 0x19, 0x1C, 0x3C, 0x87, 0x45, 0x2B, 0xC9, 0xDF, 0xAF, 0x46,
		0x3F, 0x88, 0xE8, 0x61, 0xC7, 0x18, 0x91, 0x97, 0xB1, 0x91, 0xF9, 0x70, 0x4D, 0x60, 0x82, 0x1F,
		0x8F, 0xF4, 0x8B, 0xC1, 0xFF, 0xF4, 0x27, 0xB3, 0x08, 0x75, 0x9A, 0x51, 0x0D, 0x9B, 0x61, 0xFA,
		0x90, 0x14, 0x8D, 0x26, 0xC2, 0x37, 0x7E, 0x56, 0x91, 0x76, 0xA0, 0x25, 0xC0, 0x59, 0x43, 0x42,
		0x53, 0x0C, 0x32, 0x13, 0xFD, 0x42, 0xF7, 0xEF, 0xBA, 0x45, 0xB9, 0x48, 0x11, 0xE7, 0xA8, 0xCF,
		0x19, 0xB5, 0x5F, 0x8F, 0xA5, 0x32, 0x73, 0x2B, 0x7C, 0x76, 0xAA, 0x10, 0xC0, 0x0C, 0x9F, 0x68,
		0x71, 0xA5, 0x1C, 0x0C, 0xFF, 0xFF, 0xFF, 0xFF, 0x1A, 0x0C, 0x18, 0x00, 0x03, 0xFF, 0x22, 0x0C,
		0xFF, 0xFF, 0xFF, 0xFF, 0x1A, 0x12, 0x08, 0x02, 0x25, 0x1C, 0x0C, 0xFF, 0xFF, 0xFF, 0xFF, 0x1A,
		0x12, 0x08, 0x06, 0x24, 0x16, 0x08, 0x1A, 0x25, 0x21, 0x0C, 0xFF, 0xFF, 0xFF, 0xFF, 0x1A, 0x12,
		0x12, 0x08, 0x02, 0x25, 0x16, 0x08, 0x1E, 0x24, 0x21, 0x0C, 0xFF, 0xFF, 0xFF, 0xFF, 0x1A, 0x27,
		0x12, 0x08, 0x09, 0x24, 0x22, 0x0C, 0xFF, 0xFF, 0xFF, 0xFF, 0x1A, 0x12, 0x08, 0x07, 0x24, 0x1C,
};

uint64_t DW_OP_deref(uint64_t VA) {
	int index = (VA - 0x400648); // / 4;
	return *(uint64_t*)(&Table_00400648[index]);
}

uint64_t DW_OP_deref_size(int Size, uint64_t Ptr) {
	int index = (Ptr - 0x400648) / 4;
	return ((uint32_t*)Table_00400648)[index];
}

void DW_OP_rot(uint64_t& A, uint64_t& B, uint64_t& C) {
	uint64_t t1, t2, t3;

	t1 = A;
	t2 = B;
	t3 = C;

	A = t2;
	B = t3;
	C = t1;
}

void DW_OP_swap(uint64_t& A, uint64_t& B) {
	uint64_t t = A;
	A = B;
	B = t;
}

uint64_t __fastcall VM_Func(const char* Flag)
{
	uint64_t S0 = 0, S1 = 0, S2 = 0, S3 = 0, S4 = 0, S5 = 0, S6 = 0, S7 = 0, S8 = 0, S9 = 0, S10 = 0, S11 = 0, S12;
	uint64_t S13 = 0, S14 = 0, S15 = 0, S16 = 0, S17 = 0, S18 = 0, S19 = 0, S20 = 0, S21 = 0, S22 = 0, S23 = 0;
	uint64_t S24 = 0, S25 = 0, S26 = 0, S27 = 0, S28 = 0, S29 = 0, S30 = 0, S31 = 0, S32 = 0, S33 = 0, S34 = 0;
  uint64_t S35 = 0, S36 = 0, S37 = 0, S38 = 0, S39 = 0, S40 = 0, S41 = 0, S42 = 0, S43 = 0, S44 = 0;
	uint64_t STemp1, STemp2,STemp3;
	uint64_t Result;

	//#include "code.h"
	uint64_t* F = (uint64_t*)Flag;
			
	S2 = F[0]; // S2 DW_OP_deref
	DW_OP_swap(S2, S1);
	S3 = F[1]; // S3 DW_OP_deref
	DW_OP_swap(S3, S2);
	S4 = F[2]; // S4 DW_OP_deref
	DW_OP_swap(S4, S3);
	S5 = F[3]; // S4 DW_OP_deref
	DW_OP_swap(S5, S4);
	S5 = Flag[32];
	S5 = S1; // DW_OP_dup
	S6 = S2; // DW_OP_dup
	
#include "tainted.c"
		
	return S21;
}

int main(void) {
	//BinaryEnd = (uint64_t)decrypted_file + decrypted_file_len;

	//SSTIC{a947d6980ccf7b87cb8d7c246} <= Example key
// Build up flag
// 25 chars huma readable
	//char FlagInner[] = "Z11111112222222233333333Z";
	char FlagInner[] =   "Z11111112222222233333333Z";
	//klee_make_symbolic(FlagInner, 26, "InnerFlag");
	printf("%d\n", sizeof(FlagInner));
	for (int i = 0; i < 25; i++) {
		if (FlagInner[i] >= '0' && FlagInner[i] <= '9')
			continue;

		if (FlagInner[i] >= 'a' && FlagInner[i] <= 'z')
			continue;

		if (FlagInner[i] >= 'A' && FlagInner[i] <= 'Z')
			continue;

		//printf("Wrong Input!\n");
		exit(1);
	}

	char Flag[] = "SSTIC{1111111122222222333333334}"; // Only => 2DB6A6078FFCF147
	//memcpy(Flag + 6, FlagInner, 25); // = D7783616EF60E415

	uint64_t * SimArgv[2];
	SimArgv[0] = (uint64_t*)0x1111111111111111;
	SimArgv[1] = (uint64_t*)Flag;

	uint64_t Result = VM_Func(Flag);
	printf("Result %llX\n", Result);

	return 0;
}