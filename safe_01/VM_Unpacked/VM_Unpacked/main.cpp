#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "df.h"

#pragma warning(disable:4102)

uint64_t BinaryStart = 0x400000;
uint64_t BinaryEnd = 0x400000 + 0x14150;
uint64_t BinaryImageBase = 0x400000;

uint64_t MappedBinaryImageBase = 0x400000;

uint64_t StackRegister = 0;

bool isBinaryVA(const void* VA) {
	uint64_t VA_Ptr = (uint64_t)VA;
	if (VA_Ptr >= BinaryStart && VA_Ptr < BinaryEnd) {
		return true;
	}

	return false;
}

uint64_t getBinaryVA(const void* VA) {
	uint64_t VA_Ptr = (uint64_t)VA - BinaryStart;

	return VA_Ptr + BinaryImageBase;
}

uint64_t getMappedBinary(const void* VA) {
	uint64_t VA_Ptr = (uint64_t)VA;

	if (VA_Ptr >= BinaryImageBase && VA_Ptr < (BinaryImageBase + 0x14150)) {
		return VA_Ptr - BinaryImageBase + MappedBinaryImageBase;
	}

	return VA_Ptr;
}

static __forceinline int read_1u(const void* p) {
	return *(const unsigned char*)p;
}

static __forceinline int read_1s(const void* p) {
	return *(const signed char*)p;
}

static __forceinline int read_2u(const void* p) {
	uint16_t* up = (uint16_t*)p;
	return (int) *up;
}

static __forceinline int read_2s(const void* p) {
	int16_t* up = (int16_t*)p;
	return (int)* up;
}

static __forceinline unsigned int read_4u(const void* p) {
	if (isBinaryVA(p)) {
		//printf("Constant [0x%08X] = 0x%08X\n", (const uint32_t)p, *(uint32_t*)getMappedBinary(p));
		p = (const void*)getMappedBinary(p);
	}
	uint32_t* up = (uint32_t*)p;
	return (int)* up;
}

static __forceinline int read_4s(const void* p) {
	int32_t* up = (int32_t*)p;
	return (int)* up;
}

static __forceinline unsigned long read_8u(const void* p) {
	uint64_t* up = (uint64_t*)p;
	return (int)* up;
}

static __forceinline unsigned long read_8s(const void* p) {
	int64_t* up = (int64_t*)p;
	return (int)* up;
}

__forceinline uint64_t DW_OP_reg(int Reg) {
	if (Reg != 31) {
		printf("Reg error!!!\n");
		exit(0);
	}
	return StackRegister;
}

__forceinline uint64_t DW_OP_lit(uint64_t lit) {
	return lit;
}

__forceinline uint64_t DW_OP_const1u(uint8_t Const) {
	return Const;
}

__forceinline uint64_t DW_OP_const4u(uint32_t Const) {
	return Const;
}

__forceinline uint64_t DW_OP_const8u(uint64_t Const) {
	return Const;
}

__forceinline uint64_t DW_OP_plus(uint64_t A, uint64_t B) {
	return A + B;
}

__forceinline uint64_t DW_OP_minus(uint64_t A, uint64_t B) {
	return A - B;
}

__forceinline uint64_t DW_OP_and(uint64_t A, uint64_t B) {
	return A & B;
}

__forceinline uint64_t DW_OP_or(uint64_t A, uint64_t B) {
	return A | B;
}

__forceinline uint64_t DW_OP_shr(uint64_t A, uint64_t B) {
	return A >> B;
}

__forceinline uint64_t DW_OP_shl(uint64_t A, uint64_t B) {
	return A << B;
}

__forceinline uint64_t DW_OP_xor(uint64_t A, uint64_t B) {
	return A ^ B;
}

__forceinline uint64_t DW_OP_mul(uint64_t A, uint64_t B) {
	return A * B;
}

__forceinline uint64_t DW_OP_deref(uint64_t VA) {
	const void*p = (const void*)VA;
	if (isBinaryVA(p)) {
		//printf("Constant [0x%08X] = 0x%016llX\n", (const uint32_t)p, *(uint64_t*)getMappedBinary(p));
		p = (const void*)getMappedBinary(p);
	}

	return *(uint64_t *) p;
}

__forceinline uint64_t DW_OP_deref_size(int Size, uint64_t Ptr) {
	void* ptr = (void*)Ptr;
	switch (Size) {
	case 1:
		return read_1u(ptr);
		break;
	case 2:
		return read_2u(ptr);
		break;
	case 4:
		return read_4u(ptr);
		break;
	case 8:
		return read_8u(ptr);
		break;
	default:
		//Error
		printf("Erro!!!!\n");
		exit(0);
	}
}

__forceinline void DW_OP_swap(uint64_t &A, uint64_t &B) {
	uint64_t t = A;
	A = B;
	B = t;	
}

__forceinline void DW_OP_rot(uint64_t& A, uint64_t& B, uint64_t& C) {
	uint64_t t1, t2, t3;
	
	t1 = A;
	t2 = B;
	t3 = C;
	A = t2;
	B = t3;
	C = t1;
}


int VM_Func() {
 uint64_t S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13,S14,S15,S16, S17, S18,S19,S20,S21,S22,S23,S24,S25,S26,S27,S28,S29, S30, S31;

_00403213: goto _00400258; // DW_OP_skip 0xFFFFD042 (0x00400258)
_00400258: S1 = DW_OP_reg(31);
_00400259: S2 = DW_OP_const1u(0xA8);
_0040025B: S1 = DW_OP_plus(S1, S2);
_0040025C: S1 = DW_OP_deref(S1);
_0040025D: S2 = DW_OP_const1u(0x08);
_0040025F: S1 = DW_OP_plus(S1, S2);
_00400260: S1 = DW_OP_deref(S1);
_00400261: S2 = S1; // DW_OP_dup();
_00400262: S2 = DW_OP_deref(S2);
_00400263: DW_OP_swap(S2, S1);
_00400264: S3 = DW_OP_const1u(0x08);
_00400266: S2 = DW_OP_plus(S2, S3);
_00400267: S3 = S2; // DW_OP_dup();
_00400268: S3 = DW_OP_deref(S3);
_00400269: DW_OP_swap(S3, S2);
_0040026A: S4 = DW_OP_const1u(0x08);
_0040026C: S3 = DW_OP_plus(S3, S4);
_0040026D: S4 = S3; // DW_OP_dup();
_0040026E: S4 = DW_OP_deref(S4);
_0040026F: DW_OP_swap(S4, S3);
_00400270: S5 = DW_OP_const1u(0x08);
_00400272: S4 = DW_OP_plus(S4, S5);
_00400273: S5 = S4; // DW_OP_dup();
_00400274: S5 = DW_OP_deref(S5);
_00400275: DW_OP_swap(S5, S4);
_00400276: S6 = DW_OP_const1u(0x08);
_00400278: S5 = DW_OP_plus(S5, S6);
_00400279: S5 = DW_OP_deref_size(1, S5);
_0040027B: if (S5 != 0) goto _004002C2; //// DW_OP_bra 0x00000044 (0x0040027E, 0x004002C2)
_0040027E: S5 = S1; // DW_OP_pick(S1)
_00400280: S6 = S2; // DW_OP_pick(S2)
_00400282: goto _004002CE; // DW_OP_skip 0x00000049 (0x004002CE)
_004002C2: S5 = DW_OP_const8u(0x00000000004030B8);
//_004002CB: goto _004082CD; // DW_OP_skip 0x00007FFF (0x004082CD)
 return 0x00000000004030B8;
_004002CE: S7 = DW_OP_lit(00);
_004002CF: DW_OP_rot(S7, S6, S5);
_004002D0: S8 = DW_OP_lit(00);
_004002D1: S9 = S3; // DW_OP_pick(S3)
_004002D3: S10 = S4; // DW_OP_pick(S4)
_004002D5: goto _0040030B; // DW_OP_skip 0x00000033 (0x0040030B)
_0040030B: S11 = DW_OP_lit(04);
_0040030C: DW_OP_rot(S11, S10, S9);
_0040030D: S12 = S11; // DW_OP_dup();
_0040030E: S13 = DW_OP_const8u(0x00000000FFFFFFFF);
_00400317: S12 = DW_OP_and(S12, S13);
_00400318: DW_OP_swap(S12, S11);
_00400319: S13 = DW_OP_const8u(0xFFFFFFFF00000000);
_00400322: S12 = DW_OP_and(S12, S13);
_00400323: S13 = DW_OP_const1u(0x20);
_00400325: S12 = DW_OP_shr(S12, S13);
_00400326: DW_OP_rot(S12, S11, S10);
_00400327: DW_OP_rot(S12, S11, S10);
_00400328: S13 = S12; // DW_OP_dup();
_00400329: S14 = DW_OP_const8u(0x00000000FFFFFFFF);
_00400332: S13 = DW_OP_and(S13, S14);
_00400333: DW_OP_swap(S13, S12);
_00400334: S14 = DW_OP_const8u(0xFFFFFFFF00000000);
_0040033D: S13 = DW_OP_and(S13, S14);
_0040033E: S14 = DW_OP_const1u(0x20);
_00400340: S13 = DW_OP_shr(S13, S14);
_00400341: S14 = S13; // DW_OP_dup();
_00400342: DW_OP_rot(S14, S13, S12);
_00400343: S15 = S10; // DW_OP_pick(S10)
_00400345: S14 = DW_OP_plus(S14, S15);
_00400346: S13 = DW_OP_xor(S13, S14);
_00400347: S14 = DW_OP_const4u(0xFFFFFFFF);
_0040034C: S13 = DW_OP_and(S13, S14);
_0040034D: DW_OP_swap(S13, S12);
_0040034E: S14 = S10; // DW_OP_pick(S10)
_00400350: S13 = DW_OP_and(S13, S14);
_00400351: DW_OP_swap(S13, S12);
_00400352: S14 = S13; // DW_OP_dup();
_00400353: S15 = S10; // DW_OP_pick(S10)
_00400355: DW_OP_swap(S15, S14);
_00400356: S14 = DW_OP_minus(S14, S15);
_00400357: S15 = DW_OP_const4u(0xFFFFFFFF);
_0040035C: S14 = DW_OP_and(S14, S15);
_0040035D: DW_OP_swap(S14, S13);
_0040035E: S15 = S11; // DW_OP_pick(S11)
_00400360: S16 = DW_OP_const1u(0xFF);
_00400362: S15 = DW_OP_and(S15, S16);
_00400363: S16 = DW_OP_const1u(0x02);
_00400365: S15 = DW_OP_shl(S15, S16);
_00400366: S16 = DW_OP_const8u(0x00000000004006B4);
_0040036F: S15 = DW_OP_plus(S15, S16);
_00400370: S15 = DW_OP_deref_size(4, S15);
_00400372: S14 = DW_OP_plus(S14, S15);
_00400373: S15 = DW_OP_const4u(0xFFFFFFFF);
_00400378: S14 = DW_OP_and(S14, S15);
_00400379: S15 = S14; // DW_OP_dup();
_0040037A: S16 = S11; // DW_OP_pick(S11)
_0040037C: S17 = DW_OP_const1u(0x08);
_0040037E: S16 = DW_OP_shr(S16, S17);
_0040037F: S15 = DW_OP_xor(S15, S16);
_00400380: DW_OP_rot(S15, S14, S13);
_00400381: DW_OP_rot(S15, S14, S13);
_00400382: DW_OP_swap(S15, S14);
_00400383: S16 = DW_OP_const1u(0x20);
_00400385: S15 = DW_OP_shl(S15, S16);
_00400386: S14 = DW_OP_or(S14, S15);
_00400387: DW_OP_rot(S14, S13, S12);
_00400388: DW_OP_swap(S14, S13);
_00400389: S15 = DW_OP_const1u(0x20);
_0040038B: S14 = DW_OP_shl(S14, S15);
_0040038C: S13 = DW_OP_or(S13, S14);
_0040038D: DW_OP_swap(S13, S12);
_0040038E: DW_OP_rot(S13, S12, S11);
_0040038F: DW_OP_rot(S13, S12, S11);
_00400390: // DW_OP_drop();
_00400391: DW_OP_rot(S12, S11, S10);
_00400392: DW_OP_rot(S12, S11, S10);
_00400393: // DW_OP_drop();
_00400394: DW_OP_rot(S11, S10, S9);
_00400395: DW_OP_rot(S11, S10, S9);
_00400396: S12 = DW_OP_const1u(0x01);
_00400398: S11 = DW_OP_minus(S11, S12);
_00400399: S12 = S11; // DW_OP_dup();
_0040039A: if (S12 != 0) goto _0040030C; //// DW_OP_bra 0xFFFFFF6F (0x0040039D, 0x0040030C)
_0040039D: // DW_OP_drop();
_0040039E: S11 = S8; // DW_OP_pick(S8)
_004003A0: if (S11 != 0) goto _004003A6; //// DW_OP_bra 0x00000003 (0x004003A3, 0x004003A6)
_004003A3: goto _004002D8; // DW_OP_skip 0xFFFFFF32 (0x004002D8)
_004002D8: S11 = S6; // DW_OP_pick(S6)
_004002DA: S12 = S7; // DW_OP_pick(S7)
_004002DC: goto _004003A9; // DW_OP_skip 0x000000CA (0x004003A9)
_004003A6: goto _004002ED; // DW_OP_skip 0xFFFFFF44 (0x004002ED)
_004002ED: S11 = S3; // DW_OP_pick(S3)
_004002EF: S12 = S4; // DW_OP_pick(S4)
_004002F1: goto _004003A9; // DW_OP_skip 0x000000B5 (0x004003A9)
_004003A9: DW_OP_swap(S12, S11);
_004003AA: S13 = DW_OP_lit(00);
_004003AB: DW_OP_rot(S13, S12, S11);
_004003AC: S14 = S11; // DW_OP_pick(S11)
_004003AE: S15 = S9; // DW_OP_pick(S9)
_004003B0: S16 = S10; // DW_OP_pick(S10)
_004003B2: DW_OP_rot(S16, S15, S14);
_004003B3: DW_OP_rot(S16, S15, S14);
_004003B4: DW_OP_rot(S16, S15, S14);
_004003B5: S17 = DW_OP_lit(00);
_004003B6: DW_OP_rot(S17, S16, S15);
_004003B7: S18 = S15; // DW_OP_pick(S15)
_004003B9: goto _0040055C; // DW_OP_skip 0x000001A0 (0x0040055C)
_0040055C: DW_OP_rot(S18, S17, S16);
_0040055D: DW_OP_swap(S18, S17);
_0040055E: S19 = S18; // DW_OP_dup();
_0040055F: S20 = DW_OP_const8u(0x00000000FFFFFFFF);
_00400568: S19 = DW_OP_and(S19, S20);
_00400569: DW_OP_swap(S19, S18);
_0040056A: S20 = DW_OP_const8u(0xFFFFFFFF00000000);
_00400573: S19 = DW_OP_and(S19, S20);
_00400574: S20 = DW_OP_const1u(0x20);
_00400576: S19 = DW_OP_shr(S19, S20);
_00400577: DW_OP_rot(S19, S18, S17);
_00400578: DW_OP_rot(S19, S18, S17);
_00400579: S20 = S19; // DW_OP_dup();
_0040057A: S21 = DW_OP_const8u(0x00000000FFFFFFFF);
_00400583: S20 = DW_OP_and(S20, S21);
_00400584: DW_OP_swap(S20, S19);
_00400585: S21 = DW_OP_const8u(0xFFFFFFFF00000000);
_0040058E: S20 = DW_OP_and(S20, S21);
_0040058F: S21 = DW_OP_const1u(0x20);
_00400591: S20 = DW_OP_shr(S20, S21);
_00400592: S21 = S16; // DW_OP_pick(S16)
_00400594: S22 = DW_OP_lit(04);
_00400595: S21 = DW_OP_mul(S21, S22);
_00400596: S22 = DW_OP_const8u(0x0000000000400678);
_0040059F: S21 = DW_OP_plus(S21, S22);
_004005A0: S21 = DW_OP_deref_size(4, S21);
_004005A2: S22 = S17; // DW_OP_pick(S17)
_004005A4: S21 = DW_OP_xor(S21, S22);
_004005A5: S22 = S18; // DW_OP_pick(S18)
_004005A7: S23 = DW_OP_const4u(0x45786532);
_004005AC: S22 = DW_OP_plus(S22, S23);
_004005AD: S23 = DW_OP_const4u(0xFFFFFFFF);
_004005B2: S22 = DW_OP_and(S22, S23);
_004005B3: S23 = S22; // DW_OP_dup();
_004005B4: S24 = S19; // DW_OP_pick(S19)
_004005B6: S23 = DW_OP_xor(S23, S24);
_004005B7: S24 = S20; // DW_OP_pick(S20)
_004005B9: S25 = S24; // DW_OP_dup();
_004005BA: S26 = DW_OP_const1u(0x04);
_004005BC: S25 = DW_OP_shl(S25, S26);
_004005BD: DW_OP_swap(S25, S24);
_004005BE: S26 = DW_OP_const1u(0x1C);
_004005C0: S25 = DW_OP_shr(S25, S26);
_004005C1: S24 = DW_OP_or(S24, S25);
_004005C2: S25 = DW_OP_const4u(0xFFFFFFFF);
_004005C7: S24 = DW_OP_and(S24, S25);
_004005C8: DW_OP_rot(S24, S23, S22);
_004005C9: DW_OP_rot(S24, S23, S22);
_004005CA: S25 = S24; // DW_OP_dup();
_004005CB: S26 = S21; // DW_OP_pick(S21)
_004005CD: DW_OP_swap(S26, S25);
_004005CE: S25 = DW_OP_minus(S25, S26);
_004005CF: S26 = DW_OP_const4u(0xFFFFFFFF);
_004005D4: S25 = DW_OP_and(S25, S26);
_004005D5: S26 = S22; // DW_OP_pick(S22)
_004005D7: S27 = DW_OP_const4u(0x80000000);
_004005DC: S26 = DW_OP_and(S26, S27);
_004005DD: if (S26 != 0) goto _004005E8; //// DW_OP_bra 0x00000008 (0x004005E0, 0x004005E8)
_004005E0: S26 = DW_OP_const4u(0x17246549);
_004005E5: goto _004005ED; // DW_OP_skip 0x00000005 (0x004005ED)
_004005E8: S26 = DW_OP_const4u(0x84653217);
_004005ED: goto _00400AB5; // DW_OP_skip 0x000004C5 (0x00400AB5)
_00400AB5: S27 = DW_OP_const4u(0xA571689F);
_00400ABA: S26 = DW_OP_minus(S26, S27);
_00400ABB: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400AC0: S26 = DW_OP_and(S26, S27);
_00400AC1: S27 = DW_OP_const4u(0xFF030018);
_00400AC6: S26 = DW_OP_plus(S26, S27);
_00400AC7: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400ACC: S26 = DW_OP_and(S26, S27);
_00400ACD: S27 = S26; // DW_OP_dup();
_00400ACE: S28 = DW_OP_const1u(0x02);
_00400AD0: S27 = DW_OP_shr(S27, S28);
_00400AD1: S26 = DW_OP_minus(S26, S27);
_00400AD2: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400AD7: S26 = DW_OP_and(S26, S27);
_00400AD8: S27 = S26; // DW_OP_dup();
_00400AD9: S28 = DW_OP_const1u(0x06);
_00400ADB: S27 = DW_OP_shl(S27, S28);
_00400ADC: DW_OP_swap(S27, S26);
_00400ADD: S28 = DW_OP_const1u(0x1A);
_00400ADF: S27 = DW_OP_shr(S27, S28);
_00400AE0: S26 = DW_OP_or(S26, S27);
_00400AE1: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400AE6: S26 = DW_OP_and(S26, S27);
_00400AE7: S27 = S26; // DW_OP_dup();
_00400AE8: S28 = S27; // DW_OP_dup();
_00400AE9: S29 = DW_OP_const1u(0x02);
_00400AEB: S28 = DW_OP_shr(S28, S29);
_00400AEC: DW_OP_swap(S28, S27);
_00400AED: S29 = DW_OP_const1u(0x1E);
_00400AEF: S28 = DW_OP_shl(S28, S29);
_00400AF0: S27 = DW_OP_or(S27, S28);
_00400AF1: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400AF6: S27 = DW_OP_and(S27, S28);
_00400AF7: S26 = DW_OP_xor(S26, S27);
_00400AF8: S27 = S26; // DW_OP_dup();
_00400AF9: S28 = DW_OP_const1u(0x09);
_00400AFB: S27 = DW_OP_shl(S27, S28);
_00400AFC: S26 = DW_OP_plus(S26, S27);
_00400AFD: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400B02: S26 = DW_OP_and(S26, S27);
_00400B03: S27 = S26; // DW_OP_dup();
_00400B04: S28 = DW_OP_const1u(0x07);
_00400B06: S27 = DW_OP_shl(S27, S28);
_00400B07: S26 = DW_OP_minus(S26, S27);
_00400B08: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400B0D: S26 = DW_OP_and(S26, S27);
_00400B0E: S27 = S26; // DW_OP_dup();
_00400B0F: S28 = S27; // DW_OP_dup();
_00400B10: S29 = DW_OP_const1u(0x05);
_00400B12: S28 = DW_OP_shl(S28, S29);
_00400B13: DW_OP_swap(S28, S27);
_00400B14: S29 = DW_OP_const1u(0x1B);
_00400B16: S28 = DW_OP_shr(S28, S29);
_00400B17: S27 = DW_OP_or(S27, S28);
_00400B18: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400B1D: S27 = DW_OP_and(S27, S28);
_00400B1E: S26 = DW_OP_plus(S26, S27);
_00400B1F: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400B24: S26 = DW_OP_and(S26, S27);
_00400B25: S27 = S26; // DW_OP_dup();
_00400B26: S28 = S27; // DW_OP_dup();
_00400B27: S29 = DW_OP_const1u(0x09);
_00400B29: S28 = DW_OP_shl(S28, S29);
_00400B2A: DW_OP_swap(S28, S27);
_00400B2B: S29 = DW_OP_const1u(0x17);
_00400B2D: S28 = DW_OP_shr(S28, S29);
_00400B2E: S27 = DW_OP_or(S27, S28);
_00400B2F: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400B34: S27 = DW_OP_and(S27, S28);
_00400B35: S26 = DW_OP_xor(S26, S27);
_00400B36: S27 = S26; // DW_OP_dup();
_00400B37: S28 = DW_OP_const1u(0x03);
_00400B39: S27 = DW_OP_shl(S27, S28);
_00400B3A: S26 = DW_OP_xor(S26, S27);
_00400B3B: S27 = S26; // DW_OP_dup();
_00400B3C: S28 = S27; // DW_OP_dup();
_00400B3D: S29 = DW_OP_const1u(0x05);
_00400B3F: S28 = DW_OP_shl(S28, S29);
_00400B40: DW_OP_swap(S28, S27);
_00400B41: S29 = DW_OP_const1u(0x1B);
_00400B43: S28 = DW_OP_shr(S28, S29);
_00400B44: S27 = DW_OP_or(S27, S28);
_00400B45: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400B4A: S27 = DW_OP_and(S27, S28);
_00400B4B: S26 = DW_OP_plus(S26, S27);
_00400B4C: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400B51: S26 = DW_OP_and(S26, S27);
_00400B52: S27 = S26; // DW_OP_dup();
_00400B53: S28 = S27; // DW_OP_dup();
_00400B54: S29 = DW_OP_const1u(0x06);
_00400B56: S28 = DW_OP_shr(S28, S29);
_00400B57: DW_OP_swap(S28, S27);
_00400B58: S29 = DW_OP_const1u(0x1A);
_00400B5A: S28 = DW_OP_shl(S28, S29);
_00400B5B: S27 = DW_OP_or(S27, S28);
_00400B5C: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400B61: S27 = DW_OP_and(S27, S28);
_00400B62: S26 = DW_OP_plus(S26, S27);
_00400B63: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400B68: S26 = DW_OP_and(S26, S27);
_00400B69: S27 = S26; // DW_OP_dup();
_00400B6A: S28 = DW_OP_const1u(0x03);
_00400B6C: S27 = DW_OP_shr(S27, S28);
_00400B6D: S26 = DW_OP_xor(S26, S27);
_00400B6E: S27 = S26; // DW_OP_dup();
_00400B6F: S28 = S27; // DW_OP_dup();
_00400B70: S29 = DW_OP_const1u(0x02);
_00400B72: S28 = DW_OP_shl(S28, S29);
_00400B73: DW_OP_swap(S28, S27);
_00400B74: S29 = DW_OP_const1u(0x1E);
_00400B76: S28 = DW_OP_shr(S28, S29);
_00400B77: S27 = DW_OP_or(S27, S28);
_00400B78: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400B7D: S27 = DW_OP_and(S27, S28);
_00400B7E: S26 = DW_OP_minus(S26, S27);
_00400B7F: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400B84: S26 = DW_OP_and(S26, S27);
_00400B85: S27 = S26; // DW_OP_dup();
_00400B86: S28 = DW_OP_const1u(0x09);
_00400B88: S27 = DW_OP_shl(S27, S28);
_00400B89: S26 = DW_OP_plus(S26, S27);
_00400B8A: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400B8F: S26 = DW_OP_and(S26, S27);
_00400B90: S27 = S26; // DW_OP_dup();
_00400B91: S28 = S27; // DW_OP_dup();
_00400B92: S29 = DW_OP_const1u(0x09);
_00400B94: S28 = DW_OP_shl(S28, S29);
_00400B95: DW_OP_swap(S28, S27);
_00400B96: S29 = DW_OP_const1u(0x17);
_00400B98: S28 = DW_OP_shr(S28, S29);
_00400B99: S27 = DW_OP_or(S27, S28);
_00400B9A: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400B9F: S27 = DW_OP_and(S27, S28);
_00400BA0: S26 = DW_OP_xor(S26, S27);
_00400BA1: S27 = S26; // DW_OP_dup();
_00400BA2: S28 = DW_OP_const1u(0x03);
_00400BA4: S27 = DW_OP_shr(S27, S28);
_00400BA5: S26 = DW_OP_xor(S26, S27);
_00400BA6: S27 = S26; // DW_OP_dup();
_00400BA7: S28 = DW_OP_const1u(0x03);
_00400BA9: S27 = DW_OP_shr(S27, S28);
_00400BAA: DW_OP_swap(S27, S26);
_00400BAB: S28 = DW_OP_const1u(0x1D);
_00400BAD: S27 = DW_OP_shl(S27, S28);
_00400BAE: S26 = DW_OP_or(S26, S27);
_00400BAF: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400BB4: S26 = DW_OP_and(S26, S27);
_00400BB5: S27 = S26; // DW_OP_dup();
_00400BB6: S28 = DW_OP_const1u(0x06);
_00400BB8: S27 = DW_OP_shl(S27, S28);
_00400BB9: DW_OP_swap(S27, S26);
_00400BBA: S28 = DW_OP_const1u(0x1A);
_00400BBC: S27 = DW_OP_shr(S27, S28);
_00400BBD: S26 = DW_OP_or(S26, S27);
_00400BBE: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400BC3: S26 = DW_OP_and(S26, S27);
_00400BC4: S27 = S26; // DW_OP_dup();
_00400BC5: S28 = DW_OP_const1u(0x09);
_00400BC7: S27 = DW_OP_shl(S27, S28);
_00400BC8: S26 = DW_OP_plus(S26, S27);
_00400BC9: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400BCE: S26 = DW_OP_and(S26, S27);
_00400BCF: S27 = S26; // DW_OP_dup();
_00400BD0: S28 = DW_OP_const1u(0x03);
_00400BD2: S27 = DW_OP_shr(S27, S28);
_00400BD3: DW_OP_swap(S27, S26);
_00400BD4: S28 = DW_OP_const1u(0x1D);
_00400BD6: S27 = DW_OP_shl(S27, S28);
_00400BD7: S26 = DW_OP_or(S26, S27);
_00400BD8: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400BDD: S26 = DW_OP_and(S26, S27);
_00400BDE: S27 = S26; // DW_OP_dup();
_00400BDF: S28 = DW_OP_const1u(0x06);
_00400BE1: S27 = DW_OP_shl(S27, S28);
_00400BE2: DW_OP_swap(S27, S26);
_00400BE3: S28 = DW_OP_const1u(0x1A);
_00400BE5: S27 = DW_OP_shr(S27, S28);
_00400BE6: S26 = DW_OP_or(S26, S27);
_00400BE7: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400BEC: S26 = DW_OP_and(S26, S27);
_00400BED: S27 = S26; // DW_OP_dup();
_00400BEE: S28 = DW_OP_const1u(0x03);
_00400BF0: S27 = DW_OP_shr(S27, S28);
_00400BF1: S26 = DW_OP_xor(S26, S27);
_00400BF2: S27 = S26; // DW_OP_dup();
_00400BF3: S28 = S27; // DW_OP_dup();
_00400BF4: S29 = DW_OP_const1u(0x09);
_00400BF6: S28 = DW_OP_shl(S28, S29);
_00400BF7: DW_OP_swap(S28, S27);
_00400BF8: S29 = DW_OP_const1u(0x17);
_00400BFA: S28 = DW_OP_shr(S28, S29);
_00400BFB: S27 = DW_OP_or(S27, S28);
_00400BFC: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400C01: S27 = DW_OP_and(S27, S28);
_00400C02: S26 = DW_OP_xor(S26, S27);
_00400C03: S27 = S26; // DW_OP_dup();
_00400C04: S28 = S27; // DW_OP_dup();
_00400C05: S29 = DW_OP_const1u(0x06);
_00400C07: S28 = DW_OP_shr(S28, S29);
_00400C08: DW_OP_swap(S28, S27);
_00400C09: S29 = DW_OP_const1u(0x1A);
_00400C0B: S28 = DW_OP_shl(S28, S29);
_00400C0C: S27 = DW_OP_or(S27, S28);
_00400C0D: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400C12: S27 = DW_OP_and(S27, S28);
_00400C13: S26 = DW_OP_minus(S26, S27);
_00400C14: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400C19: S26 = DW_OP_and(S26, S27);
_00400C1A: S27 = S26; // DW_OP_dup();
_00400C1B: S28 = S27; // DW_OP_dup();
_00400C1C: S29 = DW_OP_const1u(0x06);
_00400C1E: S28 = DW_OP_shr(S28, S29);
_00400C1F: DW_OP_swap(S28, S27);
_00400C20: S29 = DW_OP_const1u(0x1A);
_00400C22: S28 = DW_OP_shl(S28, S29);
_00400C23: S27 = DW_OP_or(S27, S28);
_00400C24: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400C29: S27 = DW_OP_and(S27, S28);
_00400C2A: S26 = DW_OP_plus(S26, S27);
_00400C2B: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400C30: S26 = DW_OP_and(S26, S27);
_00400C31: S27 = DW_OP_const4u(0xA571689F);
_00400C36: S26 = DW_OP_minus(S26, S27);
_00400C37: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400C3C: S26 = DW_OP_and(S26, S27);
_00400C3D: S27 = S26; // DW_OP_dup();
_00400C3E: S28 = DW_OP_const1u(0x0A);
_00400C40: S27 = DW_OP_shr(S27, S28);
_00400C41: S26 = DW_OP_plus(S26, S27);
_00400C42: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400C47: S26 = DW_OP_and(S26, S27);
_00400C48: S27 = S26; // DW_OP_dup();
_00400C49: S28 = DW_OP_const1u(0x03);
_00400C4B: S27 = DW_OP_shr(S27, S28);
_00400C4C: DW_OP_swap(S27, S26);
_00400C4D: S28 = DW_OP_const1u(0x1D);
_00400C4F: S27 = DW_OP_shl(S27, S28);
_00400C50: S26 = DW_OP_or(S26, S27);
_00400C51: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400C56: S26 = DW_OP_and(S26, S27);
_00400C57: S27 = S26; // DW_OP_dup();
_00400C58: S28 = S27; // DW_OP_dup();
_00400C59: S29 = DW_OP_const1u(0x06);
_00400C5B: S28 = DW_OP_shr(S28, S29);
_00400C5C: DW_OP_swap(S28, S27);
_00400C5D: S29 = DW_OP_const1u(0x1A);
_00400C5F: S28 = DW_OP_shl(S28, S29);
_00400C60: S27 = DW_OP_or(S27, S28);
_00400C61: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400C66: S27 = DW_OP_and(S27, S28);
_00400C67: S26 = DW_OP_minus(S26, S27);
_00400C68: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400C6D: S26 = DW_OP_and(S26, S27);
_00400C6E: S27 = S26; // DW_OP_dup();
_00400C6F: S28 = S27; // DW_OP_dup();
_00400C70: S29 = DW_OP_const1u(0x05);
_00400C72: S28 = DW_OP_shl(S28, S29);
_00400C73: DW_OP_swap(S28, S27);
_00400C74: S29 = DW_OP_const1u(0x1B);
_00400C76: S28 = DW_OP_shr(S28, S29);
_00400C77: S27 = DW_OP_or(S27, S28);
_00400C78: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400C7D: S27 = DW_OP_and(S27, S28);
_00400C7E: S26 = DW_OP_plus(S26, S27);
_00400C7F: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400C84: S26 = DW_OP_and(S26, S27);
_00400C85: S27 = DW_OP_const4u(0xFF030018);
_00400C8A: S26 = DW_OP_plus(S26, S27);
_00400C8B: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400C90: S26 = DW_OP_and(S26, S27);
_00400C91: S27 = DW_OP_const4u(0xD2105517);
_00400C96: S26 = DW_OP_xor(S26, S27);
_00400C97: S27 = S26; // DW_OP_dup();
_00400C98: S28 = S27; // DW_OP_dup();
_00400C99: S29 = DW_OP_const1u(0x05);
_00400C9B: S28 = DW_OP_shl(S28, S29);
_00400C9C: DW_OP_swap(S28, S27);
_00400C9D: S29 = DW_OP_const1u(0x1B);
_00400C9F: S28 = DW_OP_shr(S28, S29);
_00400CA0: S27 = DW_OP_or(S27, S28);
_00400CA1: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400CA6: S27 = DW_OP_and(S27, S28);
_00400CA7: S26 = DW_OP_plus(S26, S27);
_00400CA8: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400CAD: S26 = DW_OP_and(S26, S27);
_00400CAE: S27 = DW_OP_const4u(0xD2105517);
_00400CB3: S26 = DW_OP_xor(S26, S27);
_00400CB4: S27 = S26; // DW_OP_dup();
_00400CB5: S28 = DW_OP_const1u(0x06);
_00400CB7: S27 = DW_OP_shl(S27, S28);
_00400CB8: DW_OP_swap(S27, S26);
_00400CB9: S28 = DW_OP_const1u(0x1A);
_00400CBB: S27 = DW_OP_shr(S27, S28);
_00400CBC: S26 = DW_OP_or(S26, S27);
_00400CBD: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400CC2: S26 = DW_OP_and(S26, S27);
_00400CC3: S27 = DW_OP_const4u(0xA571689F);
_00400CC8: S26 = DW_OP_minus(S26, S27);
_00400CC9: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400CCE: S26 = DW_OP_and(S26, S27);
_00400CCF: S27 = S26; // DW_OP_dup();
_00400CD0: S28 = DW_OP_const1u(0x06);
_00400CD2: S27 = DW_OP_shl(S27, S28);
_00400CD3: DW_OP_swap(S27, S26);
_00400CD4: S28 = DW_OP_const1u(0x1A);
_00400CD6: S27 = DW_OP_shr(S27, S28);
_00400CD7: S26 = DW_OP_or(S26, S27);
_00400CD8: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400CDD: S26 = DW_OP_and(S26, S27);
_00400CDE: S27 = S26; // DW_OP_dup();
_00400CDF: S28 = DW_OP_const1u(0x06);
_00400CE1: S27 = DW_OP_shl(S27, S28);
_00400CE2: DW_OP_swap(S27, S26);
_00400CE3: S28 = DW_OP_const1u(0x1A);
_00400CE5: S27 = DW_OP_shr(S27, S28);
_00400CE6: S26 = DW_OP_or(S26, S27);
_00400CE7: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400CEC: S26 = DW_OP_and(S26, S27);
_00400CED: S27 = S26; // DW_OP_dup();
_00400CEE: S28 = DW_OP_const1u(0x02);
_00400CF0: S27 = DW_OP_shr(S27, S28);
_00400CF1: S26 = DW_OP_minus(S26, S27);
_00400CF2: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400CF7: S26 = DW_OP_and(S26, S27);
_00400CF8: S27 = S26; // DW_OP_dup();
_00400CF9: S28 = S27; // DW_OP_dup();
_00400CFA: S29 = DW_OP_const1u(0x06);
_00400CFC: S28 = DW_OP_shr(S28, S29);
_00400CFD: DW_OP_swap(S28, S27);
_00400CFE: S29 = DW_OP_const1u(0x1A);
_00400D00: S28 = DW_OP_shl(S28, S29);
_00400D01: S27 = DW_OP_or(S27, S28);
_00400D02: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400D07: S27 = DW_OP_and(S27, S28);
_00400D08: S26 = DW_OP_plus(S26, S27);
_00400D09: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400D0E: S26 = DW_OP_and(S26, S27);
_00400D0F: S27 = DW_OP_const4u(0xA571689F);
_00400D14: S26 = DW_OP_minus(S26, S27);
_00400D15: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400D1A: S26 = DW_OP_and(S26, S27);
_00400D1B: S27 = S26; // DW_OP_dup();
_00400D1C: S28 = DW_OP_const1u(0x09);
_00400D1E: S27 = DW_OP_shl(S27, S28);
_00400D1F: S26 = DW_OP_plus(S26, S27);
_00400D20: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400D25: S26 = DW_OP_and(S26, S27);
_00400D26: S27 = S26; // DW_OP_dup();
_00400D27: S28 = DW_OP_const1u(0x02);
_00400D29: S27 = DW_OP_shr(S27, S28);
_00400D2A: S26 = DW_OP_minus(S26, S27);
_00400D2B: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400D30: S26 = DW_OP_and(S26, S27);
_00400D31: S27 = S26; // DW_OP_dup();
_00400D32: S28 = DW_OP_const1u(0x07);
_00400D34: S27 = DW_OP_shl(S27, S28);
_00400D35: S26 = DW_OP_minus(S26, S27);
_00400D36: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400D3B: S26 = DW_OP_and(S26, S27);
_00400D3C: S27 = S26; // DW_OP_dup();
_00400D3D: S28 = DW_OP_const1u(0x03);
_00400D3F: S27 = DW_OP_shl(S27, S28);
_00400D40: S26 = DW_OP_xor(S26, S27);
_00400D41: S27 = DW_OP_const4u(0xA571689F);
_00400D46: S26 = DW_OP_minus(S26, S27);
_00400D47: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400D4C: S26 = DW_OP_and(S26, S27);
_00400D4D: S27 = S26; // DW_OP_dup();
_00400D4E: S28 = DW_OP_const1u(0x0A);
_00400D50: S27 = DW_OP_shr(S27, S28);
_00400D51: S26 = DW_OP_plus(S26, S27);
_00400D52: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400D57: S26 = DW_OP_and(S26, S27);
_00400D58: S27 = DW_OP_const4u(0xA571689F);
_00400D5D: S26 = DW_OP_minus(S26, S27);
_00400D5E: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400D63: S26 = DW_OP_and(S26, S27);
_00400D64: S27 = S26; // DW_OP_dup();
_00400D65: S28 = S27; // DW_OP_dup();
_00400D66: S29 = DW_OP_const1u(0x02);
_00400D68: S28 = DW_OP_shl(S28, S29);
_00400D69: DW_OP_swap(S28, S27);
_00400D6A: S29 = DW_OP_const1u(0x1E);
_00400D6C: S28 = DW_OP_shr(S28, S29);
_00400D6D: S27 = DW_OP_or(S27, S28);
_00400D6E: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400D73: S27 = DW_OP_and(S27, S28);
_00400D74: S26 = DW_OP_minus(S26, S27);
_00400D75: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400D7A: S26 = DW_OP_and(S26, S27);
_00400D7B: S27 = S26; // DW_OP_dup();
_00400D7C: S28 = DW_OP_lit(06);
_00400D7D: DW_OP_swap(S28, S27);
_00400D7E: S29 = DW_OP_const4u(0xD2105517);
_00400D83: S28 = DW_OP_xor(S28, S29);
_00400D84: S29 = S28; // DW_OP_dup();
_00400D85: S30 = S29; // DW_OP_dup();
_00400D86: S31 = DW_OP_const1u(0x09);
_00400D88: S30 = DW_OP_shl(S30, S31);
_00400D89: DW_OP_swap(S30, S29);
_00400D8A: S31 = DW_OP_const1u(0x17);
_00400D8C: S30 = DW_OP_shr(S30, S31);
_00400D8D: S29 = DW_OP_or(S29, S30);
_00400D8E: S30 = DW_OP_const4u(0xFFFFFFFF);
_00400D93: S29 = DW_OP_and(S29, S30);
_00400D94: S28 = DW_OP_xor(S28, S29);
_00400D95: S29 = S28; // DW_OP_dup();
_00400D96: S30 = S29; // DW_OP_dup();
_00400D97: S31 = DW_OP_const1u(0x02);
_00400D99: S30 = DW_OP_shl(S30, S31);
_00400D9A: DW_OP_swap(S30, S29);
_00400D9B: S31 = DW_OP_const1u(0x1E);
_00400D9D: S30 = DW_OP_shr(S30, S31);
_00400D9E: S29 = DW_OP_or(S29, S30);
_00400D9F: S30 = DW_OP_const4u(0xFFFFFFFF);
_00400DA4: S29 = DW_OP_and(S29, S30);
_00400DA5: S28 = DW_OP_minus(S28, S29);
_00400DA6: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400DAB: S28 = DW_OP_and(S28, S29);
_00400DAC: S29 = S28; // DW_OP_dup();
_00400DAD: S30 = S29; // DW_OP_dup();
_00400DAE: S31 = DW_OP_const1u(0x06);
_00400DB0: S30 = DW_OP_shr(S30, S31);
_00400DB1: DW_OP_swap(S30, S29);
_00400DB2: S31 = DW_OP_const1u(0x1A);
_00400DB4: S30 = DW_OP_shl(S30, S31);
_00400DB5: S29 = DW_OP_or(S29, S30);
_00400DB6: S30 = DW_OP_const4u(0xFFFFFFFF);
_00400DBB: S29 = DW_OP_and(S29, S30);
_00400DBC: S28 = DW_OP_plus(S28, S29);
_00400DBD: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400DC2: S28 = DW_OP_and(S28, S29);
_00400DC3: S29 = S28; // DW_OP_dup();
_00400DC4: S30 = DW_OP_const1u(0x0A);
_00400DC6: S29 = DW_OP_shr(S29, S30);
_00400DC7: S28 = DW_OP_plus(S28, S29);
_00400DC8: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400DCD: S28 = DW_OP_and(S28, S29);
_00400DCE: S29 = S28; // DW_OP_dup();
_00400DCF: S30 = DW_OP_const1u(0x03);
_00400DD1: S29 = DW_OP_shr(S29, S30);
_00400DD2: S28 = DW_OP_xor(S28, S29);
_00400DD3: S29 = S28; // DW_OP_dup();
_00400DD4: S30 = DW_OP_const1u(0x03);
_00400DD6: S29 = DW_OP_shr(S29, S30);
_00400DD7: DW_OP_swap(S29, S28);
_00400DD8: S30 = DW_OP_const1u(0x1D);
_00400DDA: S29 = DW_OP_shl(S29, S30);
_00400DDB: S28 = DW_OP_or(S28, S29);
_00400DDC: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400DE1: S28 = DW_OP_and(S28, S29);
_00400DE2: S29 = S28; // DW_OP_dup();
_00400DE3: S30 = DW_OP_const1u(0x06);
_00400DE5: S29 = DW_OP_shl(S29, S30);
_00400DE6: DW_OP_swap(S29, S28);
_00400DE7: S30 = DW_OP_const1u(0x1A);
_00400DE9: S29 = DW_OP_shr(S29, S30);
_00400DEA: S28 = DW_OP_or(S28, S29);
_00400DEB: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400DF0: S28 = DW_OP_and(S28, S29);
_00400DF1: S29 = DW_OP_const4u(0xA571689F);
_00400DF6: S28 = DW_OP_minus(S28, S29);
_00400DF7: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400DFC: S28 = DW_OP_and(S28, S29);
_00400DFD: S29 = S28; // DW_OP_dup();
_00400DFE: S30 = S29; // DW_OP_dup();
_00400DFF: S31 = DW_OP_const1u(0x05);
_00400E01: S30 = DW_OP_shl(S30, S31);
_00400E02: DW_OP_swap(S30, S29);
_00400E03: S31 = DW_OP_const1u(0x1B);
_00400E05: S30 = DW_OP_shr(S30, S31);
_00400E06: S29 = DW_OP_or(S29, S30);
_00400E07: S30 = DW_OP_const4u(0xFFFFFFFF);
_00400E0C: S29 = DW_OP_and(S29, S30);
_00400E0D: S28 = DW_OP_plus(S28, S29);
_00400E0E: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400E13: S28 = DW_OP_and(S28, S29);
_00400E14: S29 = DW_OP_const4u(0xA571689F);
_00400E19: S28 = DW_OP_minus(S28, S29);
_00400E1A: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400E1F: S28 = DW_OP_and(S28, S29);
_00400E20: S29 = S28; // DW_OP_dup();
_00400E21: S30 = S29; // DW_OP_dup();
_00400E22: S31 = DW_OP_const1u(0x06);
_00400E24: S30 = DW_OP_shr(S30, S31);
_00400E25: DW_OP_swap(S30, S29);
_00400E26: S31 = DW_OP_const1u(0x1A);
_00400E28: S30 = DW_OP_shl(S30, S31);
_00400E29: S29 = DW_OP_or(S29, S30);
_00400E2A: S30 = DW_OP_const4u(0xFFFFFFFF);
_00400E2F: S29 = DW_OP_and(S29, S30);
_00400E30: S28 = DW_OP_plus(S28, S29);
_00400E31: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400E36: S28 = DW_OP_and(S28, S29);
_00400E37: S29 = DW_OP_const4u(0xA571689F);
_00400E3C: S28 = DW_OP_minus(S28, S29);
_00400E3D: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400E42: S28 = DW_OP_and(S28, S29);
_00400E43: S29 = DW_OP_const4u(0xFF030018);
_00400E48: S28 = DW_OP_plus(S28, S29);
_00400E49: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400E4E: S28 = DW_OP_and(S28, S29);
_00400E4F: S29 = S28; // DW_OP_dup();
_00400E50: S30 = DW_OP_const1u(0x03);
_00400E52: S29 = DW_OP_shr(S29, S30);
_00400E53: S28 = DW_OP_xor(S28, S29);
_00400E54: S29 = DW_OP_const4u(0xFF030018);
_00400E59: S28 = DW_OP_plus(S28, S29);
_00400E5A: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400E5F: S28 = DW_OP_and(S28, S29);
_00400E60: S29 = S28; // DW_OP_dup();
_00400E61: S30 = DW_OP_const1u(0x03);
_00400E63: S29 = DW_OP_shr(S29, S30);
_00400E64: DW_OP_swap(S29, S28);
_00400E65: S30 = DW_OP_const1u(0x1D);
_00400E67: S29 = DW_OP_shl(S29, S30);
_00400E68: S28 = DW_OP_or(S28, S29);
_00400E69: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400E6E: S28 = DW_OP_and(S28, S29);
_00400E6F: S29 = S28; // DW_OP_dup();
_00400E70: S30 = DW_OP_const1u(0x03);
_00400E72: S29 = DW_OP_shl(S29, S30);
_00400E73: S28 = DW_OP_xor(S28, S29);
_00400E74: S29 = S28; // DW_OP_dup();
_00400E75: S30 = DW_OP_const1u(0x0A);
_00400E77: S29 = DW_OP_shr(S29, S30);
_00400E78: S28 = DW_OP_plus(S28, S29);
_00400E79: S29 = DW_OP_const4u(0xFFFFFFFF);
_00400E7E: S28 = DW_OP_and(S28, S29);
_00400E7F: S29 = S28; // DW_OP_dup();
_00400E80: S30 = DW_OP_const1u(0x03);
_00400E82: S29 = DW_OP_shl(S29, S30);
_00400E83: S28 = DW_OP_xor(S28, S29);
_00400E84: DW_OP_swap(S28, S27);
_00400E85: S29 = DW_OP_lit(01);
_00400E86: S28 = DW_OP_minus(S28, S29);
_00400E87: S29 = S28; // DW_OP_dup();
_00400E88: if (S29 != 0) goto _00400D7D; //// DW_OP_bra 0xFFFFFEF2 (0x00400E8B, 0x00400D7D)
_00400E8B: // DW_OP_drop();
_00400E8C: S26 = DW_OP_xor(S26, S27);
_00400E8D: S27 = S26; // DW_OP_dup();
_00400E8E: S28 = DW_OP_const1u(0x02);
_00400E90: S27 = DW_OP_shr(S27, S28);
_00400E91: S26 = DW_OP_minus(S26, S27);
_00400E92: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400E97: S26 = DW_OP_and(S26, S27);
_00400E98: S27 = DW_OP_const4u(0xA571689F);
_00400E9D: S26 = DW_OP_minus(S26, S27);
_00400E9E: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400EA3: S26 = DW_OP_and(S26, S27);
_00400EA4: S27 = DW_OP_const4u(0xFF030018);
_00400EA9: S26 = DW_OP_plus(S26, S27);
_00400EAA: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400EAF: S26 = DW_OP_and(S26, S27);
_00400EB0: S27 = S26; // DW_OP_dup();
_00400EB1: S28 = DW_OP_const1u(0x07);
_00400EB3: S27 = DW_OP_shl(S27, S28);
_00400EB4: S26 = DW_OP_minus(S26, S27);
_00400EB5: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400EBA: S26 = DW_OP_and(S26, S27);
_00400EBB: S27 = S26; // DW_OP_dup();
_00400EBC: S28 = S27; // DW_OP_dup();
_00400EBD: S29 = DW_OP_const1u(0x06);
_00400EBF: S28 = DW_OP_shr(S28, S29);
_00400EC0: DW_OP_swap(S28, S27);
_00400EC1: S29 = DW_OP_const1u(0x1A);
_00400EC3: S28 = DW_OP_shl(S28, S29);
_00400EC4: S27 = DW_OP_or(S27, S28);
_00400EC5: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400ECA: S27 = DW_OP_and(S27, S28);
_00400ECB: S26 = DW_OP_minus(S26, S27);
_00400ECC: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400ED1: S26 = DW_OP_and(S26, S27);
_00400ED2: S27 = S26; // DW_OP_dup();
_00400ED3: S28 = DW_OP_const1u(0x06);
_00400ED5: S27 = DW_OP_shl(S27, S28);
_00400ED6: DW_OP_swap(S27, S26);
_00400ED7: S28 = DW_OP_const1u(0x1A);
_00400ED9: S27 = DW_OP_shr(S27, S28);
_00400EDA: S26 = DW_OP_or(S26, S27);
_00400EDB: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400EE0: S26 = DW_OP_and(S26, S27);
_00400EE1: S27 = DW_OP_const4u(0xA571689F);
_00400EE6: S26 = DW_OP_minus(S26, S27);
_00400EE7: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400EEC: S26 = DW_OP_and(S26, S27);
_00400EED: S27 = S26; // DW_OP_dup();
_00400EEE: S28 = S27; // DW_OP_dup();
_00400EEF: S29 = DW_OP_const1u(0x05);
_00400EF1: S28 = DW_OP_shl(S28, S29);
_00400EF2: DW_OP_swap(S28, S27);
_00400EF3: S29 = DW_OP_const1u(0x1B);
_00400EF5: S28 = DW_OP_shr(S28, S29);
_00400EF6: S27 = DW_OP_or(S27, S28);
_00400EF7: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400EFC: S27 = DW_OP_and(S27, S28);
_00400EFD: S26 = DW_OP_plus(S26, S27);
_00400EFE: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400F03: S26 = DW_OP_and(S26, S27);
_00400F04: S27 = S26; // DW_OP_dup();
_00400F05: S28 = DW_OP_const1u(0x07);
_00400F07: S27 = DW_OP_shl(S27, S28);
_00400F08: S26 = DW_OP_minus(S26, S27);
_00400F09: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400F0E: S26 = DW_OP_and(S26, S27);
_00400F0F: S27 = S26; // DW_OP_dup();
_00400F10: S28 = S27; // DW_OP_dup();
_00400F11: S29 = DW_OP_const1u(0x06);
_00400F13: S28 = DW_OP_shr(S28, S29);
_00400F14: DW_OP_swap(S28, S27);
_00400F15: S29 = DW_OP_const1u(0x1A);
_00400F17: S28 = DW_OP_shl(S28, S29);
_00400F18: S27 = DW_OP_or(S27, S28);
_00400F19: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400F1E: S27 = DW_OP_and(S27, S28);
_00400F1F: S26 = DW_OP_plus(S26, S27);
_00400F20: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400F25: S26 = DW_OP_and(S26, S27);
_00400F26: S27 = S26; // DW_OP_dup();
_00400F27: S28 = S27; // DW_OP_dup();
_00400F28: S29 = DW_OP_const1u(0x06);
_00400F2A: S28 = DW_OP_shr(S28, S29);
_00400F2B: DW_OP_swap(S28, S27);
_00400F2C: S29 = DW_OP_const1u(0x1A);
_00400F2E: S28 = DW_OP_shl(S28, S29);
_00400F2F: S27 = DW_OP_or(S27, S28);
_00400F30: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400F35: S27 = DW_OP_and(S27, S28);
_00400F36: S26 = DW_OP_minus(S26, S27);
_00400F37: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400F3C: S26 = DW_OP_and(S26, S27);
_00400F3D: S27 = S26; // DW_OP_dup();
_00400F3E: S28 = DW_OP_const1u(0x06);
_00400F40: S27 = DW_OP_shl(S27, S28);
_00400F41: DW_OP_swap(S27, S26);
_00400F42: S28 = DW_OP_const1u(0x1A);
_00400F44: S27 = DW_OP_shr(S27, S28);
_00400F45: S26 = DW_OP_or(S26, S27);
_00400F46: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400F4B: S26 = DW_OP_and(S26, S27);
_00400F4C: S27 = S26; // DW_OP_dup();
_00400F4D: S28 = S27; // DW_OP_dup();
_00400F4E: S29 = DW_OP_const1u(0x05);
_00400F50: S28 = DW_OP_shl(S28, S29);
_00400F51: DW_OP_swap(S28, S27);
_00400F52: S29 = DW_OP_const1u(0x1B);
_00400F54: S28 = DW_OP_shr(S28, S29);
_00400F55: S27 = DW_OP_or(S27, S28);
_00400F56: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400F5B: S27 = DW_OP_and(S27, S28);
_00400F5C: S26 = DW_OP_plus(S26, S27);
_00400F5D: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400F62: S26 = DW_OP_and(S26, S27);
_00400F63: S27 = S26; // DW_OP_dup();
_00400F64: S28 = DW_OP_const1u(0x03);
_00400F66: S27 = DW_OP_shr(S27, S28);
_00400F67: DW_OP_swap(S27, S26);
_00400F68: S28 = DW_OP_const1u(0x1D);
_00400F6A: S27 = DW_OP_shl(S27, S28);
_00400F6B: S26 = DW_OP_or(S26, S27);
_00400F6C: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400F71: S26 = DW_OP_and(S26, S27);
_00400F72: S27 = S26; // DW_OP_dup();
_00400F73: S28 = S27; // DW_OP_dup();
_00400F74: S29 = DW_OP_const1u(0x06);
_00400F76: S28 = DW_OP_shr(S28, S29);
_00400F77: DW_OP_swap(S28, S27);
_00400F78: S29 = DW_OP_const1u(0x1A);
_00400F7A: S28 = DW_OP_shl(S28, S29);
_00400F7B: S27 = DW_OP_or(S27, S28);
_00400F7C: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400F81: S27 = DW_OP_and(S27, S28);
_00400F82: S26 = DW_OP_plus(S26, S27);
_00400F83: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400F88: S26 = DW_OP_and(S26, S27);
_00400F89: S27 = S26; // DW_OP_dup();
_00400F8A: S28 = DW_OP_const1u(0x09);
_00400F8C: S27 = DW_OP_shl(S27, S28);
_00400F8D: S26 = DW_OP_plus(S26, S27);
_00400F8E: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400F93: S26 = DW_OP_and(S26, S27);
_00400F94: S27 = S26; // DW_OP_dup();
_00400F95: S28 = DW_OP_const1u(0x03);
_00400F97: S27 = DW_OP_shl(S27, S28);
_00400F98: S26 = DW_OP_xor(S26, S27);
_00400F99: S27 = S26; // DW_OP_dup();
_00400F9A: S28 = DW_OP_const1u(0x06);
_00400F9C: S27 = DW_OP_shl(S27, S28);
_00400F9D: DW_OP_swap(S27, S26);
_00400F9E: S28 = DW_OP_const1u(0x1A);
_00400FA0: S27 = DW_OP_shr(S27, S28);
_00400FA1: S26 = DW_OP_or(S26, S27);
_00400FA2: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400FA7: S26 = DW_OP_and(S26, S27);
_00400FA8: S27 = DW_OP_const4u(0xD2105517);
_00400FAD: S26 = DW_OP_xor(S26, S27);
_00400FAE: S27 = S26; // DW_OP_dup();
_00400FAF: S28 = S27; // DW_OP_dup();
_00400FB0: S29 = DW_OP_const1u(0x09);
_00400FB2: S28 = DW_OP_shl(S28, S29);
_00400FB3: DW_OP_swap(S28, S27);
_00400FB4: S29 = DW_OP_const1u(0x17);
_00400FB6: S28 = DW_OP_shr(S28, S29);
_00400FB7: S27 = DW_OP_or(S27, S28);
_00400FB8: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400FBD: S27 = DW_OP_and(S27, S28);
_00400FBE: S26 = DW_OP_xor(S26, S27);
_00400FBF: S27 = S26; // DW_OP_dup();
_00400FC0: S28 = DW_OP_const1u(0x09);
_00400FC2: S27 = DW_OP_shl(S27, S28);
_00400FC3: S26 = DW_OP_plus(S26, S27);
_00400FC4: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400FC9: S26 = DW_OP_and(S26, S27);
_00400FCA: S27 = S26; // DW_OP_dup();
_00400FCB: S28 = DW_OP_const1u(0x0A);
_00400FCD: S27 = DW_OP_shr(S27, S28);
_00400FCE: S26 = DW_OP_plus(S26, S27);
_00400FCF: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400FD4: S26 = DW_OP_and(S26, S27);
_00400FD5: S27 = S26; // DW_OP_dup();
_00400FD6: S28 = S27; // DW_OP_dup();
_00400FD7: S29 = DW_OP_const1u(0x06);
_00400FD9: S28 = DW_OP_shr(S28, S29);
_00400FDA: DW_OP_swap(S28, S27);
_00400FDB: S29 = DW_OP_const1u(0x1A);
_00400FDD: S28 = DW_OP_shl(S28, S29);
_00400FDE: S27 = DW_OP_or(S27, S28);
_00400FDF: S28 = DW_OP_const4u(0xFFFFFFFF);
_00400FE4: S27 = DW_OP_and(S27, S28);
_00400FE5: S26 = DW_OP_minus(S26, S27);
_00400FE6: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400FEB: S26 = DW_OP_and(S26, S27);
_00400FEC: S27 = S26; // DW_OP_dup();
_00400FED: S28 = DW_OP_const1u(0x06);
_00400FEF: S27 = DW_OP_shl(S27, S28);
_00400FF0: DW_OP_swap(S27, S26);
_00400FF1: S28 = DW_OP_const1u(0x1A);
_00400FF3: S27 = DW_OP_shr(S27, S28);
_00400FF4: S26 = DW_OP_or(S26, S27);
_00400FF5: S27 = DW_OP_const4u(0xFFFFFFFF);
_00400FFA: S26 = DW_OP_and(S26, S27);
_00400FFB: S27 = DW_OP_const4u(0xFF030018);
_00401000: S26 = DW_OP_plus(S26, S27);
_00401001: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401006: S26 = DW_OP_and(S26, S27);
_00401007: S27 = S26; // DW_OP_dup();
_00401008: S28 = S27; // DW_OP_dup();
_00401009: S29 = DW_OP_const1u(0x06);
_0040100B: S28 = DW_OP_shr(S28, S29);
_0040100C: DW_OP_swap(S28, S27);
_0040100D: S29 = DW_OP_const1u(0x1A);
_0040100F: S28 = DW_OP_shl(S28, S29);
_00401010: S27 = DW_OP_or(S27, S28);
_00401011: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401016: S27 = DW_OP_and(S27, S28);
_00401017: S26 = DW_OP_plus(S26, S27);
_00401018: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040101D: S26 = DW_OP_and(S26, S27);
_0040101E: S27 = DW_OP_const4u(0xA571689F);
_00401023: S26 = DW_OP_minus(S26, S27);
_00401024: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401029: S26 = DW_OP_and(S26, S27);
_0040102A: S27 = S26; // DW_OP_dup();
_0040102B: S28 = DW_OP_const1u(0x03);
_0040102D: S27 = DW_OP_shl(S27, S28);
_0040102E: S26 = DW_OP_xor(S26, S27);
_0040102F: S27 = S26; // DW_OP_dup();
_00401030: S28 = S27; // DW_OP_dup();
_00401031: S29 = DW_OP_const1u(0x05);
_00401033: S28 = DW_OP_shl(S28, S29);
_00401034: DW_OP_swap(S28, S27);
_00401035: S29 = DW_OP_const1u(0x1B);
_00401037: S28 = DW_OP_shr(S28, S29);
_00401038: S27 = DW_OP_or(S27, S28);
_00401039: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040103E: S27 = DW_OP_and(S27, S28);
_0040103F: S26 = DW_OP_plus(S26, S27);
_00401040: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401045: S26 = DW_OP_and(S26, S27);
_00401046: S27 = S26; // DW_OP_dup();
_00401047: S28 = S27; // DW_OP_dup();
_00401048: S29 = DW_OP_const1u(0x02);
_0040104A: S28 = DW_OP_shr(S28, S29);
_0040104B: DW_OP_swap(S28, S27);
_0040104C: S29 = DW_OP_const1u(0x1E);
_0040104E: S28 = DW_OP_shl(S28, S29);
_0040104F: S27 = DW_OP_or(S27, S28);
_00401050: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401055: S27 = DW_OP_and(S27, S28);
_00401056: S26 = DW_OP_xor(S26, S27);
_00401057: S27 = S26; // DW_OP_dup();
_00401058: S28 = S27; // DW_OP_dup();
_00401059: S29 = DW_OP_const1u(0x02);
_0040105B: S28 = DW_OP_shr(S28, S29);
_0040105C: DW_OP_swap(S28, S27);
_0040105D: S29 = DW_OP_const1u(0x1E);
_0040105F: S28 = DW_OP_shl(S28, S29);
_00401060: S27 = DW_OP_or(S27, S28);
_00401061: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401066: S27 = DW_OP_and(S27, S28);
_00401067: S26 = DW_OP_xor(S26, S27);
_00401068: S27 = S26; // DW_OP_dup();
_00401069: S28 = DW_OP_const1u(0x06);
_0040106B: S27 = DW_OP_shl(S27, S28);
_0040106C: DW_OP_swap(S27, S26);
_0040106D: S28 = DW_OP_const1u(0x1A);
_0040106F: S27 = DW_OP_shr(S27, S28);
_00401070: S26 = DW_OP_or(S26, S27);
_00401071: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401076: S26 = DW_OP_and(S26, S27);
_00401077: S27 = S26; // DW_OP_dup();
_00401078: S28 = S27; // DW_OP_dup();
_00401079: S29 = DW_OP_const1u(0x06);
_0040107B: S28 = DW_OP_shr(S28, S29);
_0040107C: DW_OP_swap(S28, S27);
_0040107D: S29 = DW_OP_const1u(0x1A);
_0040107F: S28 = DW_OP_shl(S28, S29);
_00401080: S27 = DW_OP_or(S27, S28);
_00401081: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401086: S27 = DW_OP_and(S27, S28);
_00401087: S26 = DW_OP_minus(S26, S27);
_00401088: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040108D: S26 = DW_OP_and(S26, S27);
_0040108E: S27 = S26; // DW_OP_dup();
_0040108F: S28 = DW_OP_const1u(0x03);
_00401091: S27 = DW_OP_shr(S27, S28);
_00401092: S26 = DW_OP_xor(S26, S27);
_00401093: S27 = S26; // DW_OP_dup();
_00401094: S28 = DW_OP_const1u(0x02);
_00401096: S27 = DW_OP_shr(S27, S28);
_00401097: S26 = DW_OP_minus(S26, S27);
_00401098: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040109D: S26 = DW_OP_and(S26, S27);
_0040109E: S27 = DW_OP_const4u(0xFF030018);
_004010A3: S26 = DW_OP_plus(S26, S27);
_004010A4: S27 = DW_OP_const4u(0xFFFFFFFF);
_004010A9: S26 = DW_OP_and(S26, S27);
_004010AA: S27 = S26; // DW_OP_dup();
_004010AB: S28 = DW_OP_const1u(0x02);
_004010AD: S27 = DW_OP_shr(S27, S28);
_004010AE: S26 = DW_OP_minus(S26, S27);
_004010AF: S27 = DW_OP_const4u(0xFFFFFFFF);
_004010B4: S26 = DW_OP_and(S26, S27);
_004010B5: S27 = S26; // DW_OP_dup();
_004010B6: S28 = S27; // DW_OP_dup();
_004010B7: S29 = DW_OP_const1u(0x02);
_004010B9: S28 = DW_OP_shl(S28, S29);
_004010BA: DW_OP_swap(S28, S27);
_004010BB: S29 = DW_OP_const1u(0x1E);
_004010BD: S28 = DW_OP_shr(S28, S29);
_004010BE: S27 = DW_OP_or(S27, S28);
_004010BF: S28 = DW_OP_const4u(0xFFFFFFFF);
_004010C4: S27 = DW_OP_and(S27, S28);
_004010C5: S26 = DW_OP_minus(S26, S27);
_004010C6: S27 = DW_OP_const4u(0xFFFFFFFF);
_004010CB: S26 = DW_OP_and(S26, S27);
_004010CC: S27 = S26; // DW_OP_dup();
_004010CD: S28 = DW_OP_const1u(0x0A);
_004010CF: S27 = DW_OP_shr(S27, S28);
_004010D0: S26 = DW_OP_plus(S26, S27);
_004010D1: S27 = DW_OP_const4u(0xFFFFFFFF);
_004010D6: S26 = DW_OP_and(S26, S27);
_004010D7: S27 = S26; // DW_OP_dup();
_004010D8: S28 = DW_OP_const1u(0x02);
_004010DA: S27 = DW_OP_shr(S27, S28);
_004010DB: S26 = DW_OP_minus(S26, S27);
_004010DC: S27 = DW_OP_const4u(0xFFFFFFFF);
_004010E1: S26 = DW_OP_and(S26, S27);
_004010E2: S27 = S26; // DW_OP_dup();
_004010E3: S28 = DW_OP_const1u(0x07);
_004010E5: S27 = DW_OP_shl(S27, S28);
_004010E6: S26 = DW_OP_minus(S26, S27);
_004010E7: S27 = DW_OP_const4u(0xFFFFFFFF);
_004010EC: S26 = DW_OP_and(S26, S27);
_004010ED: S27 = S26; // DW_OP_dup();
_004010EE: S28 = S27; // DW_OP_dup();
_004010EF: S29 = DW_OP_const1u(0x09);
_004010F1: S28 = DW_OP_shl(S28, S29);
_004010F2: DW_OP_swap(S28, S27);
_004010F3: S29 = DW_OP_const1u(0x17);
_004010F5: S28 = DW_OP_shr(S28, S29);
_004010F6: S27 = DW_OP_or(S27, S28);
_004010F7: S28 = DW_OP_const4u(0xFFFFFFFF);
_004010FC: S27 = DW_OP_and(S27, S28);
_004010FD: S26 = DW_OP_xor(S26, S27);
_004010FE: S27 = S26; // DW_OP_dup();
_004010FF: S28 = DW_OP_const1u(0x0A);
_00401101: S27 = DW_OP_shr(S27, S28);
_00401102: S26 = DW_OP_plus(S26, S27);
_00401103: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401108: S26 = DW_OP_and(S26, S27);
_00401109: S27 = S26; // DW_OP_dup();
_0040110A: S28 = DW_OP_const1u(0x09);
_0040110C: S27 = DW_OP_shl(S27, S28);
_0040110D: S26 = DW_OP_plus(S26, S27);
_0040110E: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401113: S26 = DW_OP_and(S26, S27);
_00401114: S27 = DW_OP_const4u(0xD2105517);
_00401119: S26 = DW_OP_xor(S26, S27);
_0040111A: S27 = S26; // DW_OP_dup();
_0040111B: S28 = S27; // DW_OP_dup();
_0040111C: S29 = DW_OP_const1u(0x09);
_0040111E: S28 = DW_OP_shl(S28, S29);
_0040111F: DW_OP_swap(S28, S27);
_00401120: S29 = DW_OP_const1u(0x17);
_00401122: S28 = DW_OP_shr(S28, S29);
_00401123: S27 = DW_OP_or(S27, S28);
_00401124: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401129: S27 = DW_OP_and(S27, S28);
_0040112A: S26 = DW_OP_xor(S26, S27);
_0040112B: S27 = S26; // DW_OP_dup();
_0040112C: S28 = S27; // DW_OP_dup();
_0040112D: S29 = DW_OP_const1u(0x06);
_0040112F: S28 = DW_OP_shr(S28, S29);
_00401130: DW_OP_swap(S28, S27);
_00401131: S29 = DW_OP_const1u(0x1A);
_00401133: S28 = DW_OP_shl(S28, S29);
_00401134: S27 = DW_OP_or(S27, S28);
_00401135: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040113A: S27 = DW_OP_and(S27, S28);
_0040113B: S26 = DW_OP_minus(S26, S27);
_0040113C: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401141: S26 = DW_OP_and(S26, S27);
_00401142: S27 = DW_OP_const4u(0xA571689F);
_00401147: S26 = DW_OP_minus(S26, S27);
_00401148: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040114D: S26 = DW_OP_and(S26, S27);
_0040114E: S27 = S26; // DW_OP_dup();
_0040114F: S28 = DW_OP_const1u(0x03);
_00401151: S27 = DW_OP_shr(S27, S28);
_00401152: DW_OP_swap(S27, S26);
_00401153: S28 = DW_OP_const1u(0x1D);
_00401155: S27 = DW_OP_shl(S27, S28);
_00401156: S26 = DW_OP_or(S26, S27);
_00401157: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040115C: S26 = DW_OP_and(S26, S27);
_0040115D: S27 = S26; // DW_OP_dup();
_0040115E: S28 = S27; // DW_OP_dup();
_0040115F: S29 = DW_OP_const1u(0x06);
_00401161: S28 = DW_OP_shr(S28, S29);
_00401162: DW_OP_swap(S28, S27);
_00401163: S29 = DW_OP_const1u(0x1A);
_00401165: S28 = DW_OP_shl(S28, S29);
_00401166: S27 = DW_OP_or(S27, S28);
_00401167: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040116C: S27 = DW_OP_and(S27, S28);
_0040116D: S26 = DW_OP_plus(S26, S27);
_0040116E: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401173: S26 = DW_OP_and(S26, S27);
_00401174: S27 = S26; // DW_OP_dup();
_00401175: S28 = DW_OP_const1u(0x06);
_00401177: S27 = DW_OP_shl(S27, S28);
_00401178: DW_OP_swap(S27, S26);
_00401179: S28 = DW_OP_const1u(0x1A);
_0040117B: S27 = DW_OP_shr(S27, S28);
_0040117C: S26 = DW_OP_or(S26, S27);
_0040117D: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401182: S26 = DW_OP_and(S26, S27);
_00401183: S27 = S26; // DW_OP_dup();
_00401184: S28 = S27; // DW_OP_dup();
_00401185: S29 = DW_OP_const1u(0x09);
_00401187: S28 = DW_OP_shl(S28, S29);
_00401188: DW_OP_swap(S28, S27);
_00401189: S29 = DW_OP_const1u(0x17);
_0040118B: S28 = DW_OP_shr(S28, S29);
_0040118C: S27 = DW_OP_or(S27, S28);
_0040118D: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401192: S27 = DW_OP_and(S27, S28);
_00401193: S26 = DW_OP_xor(S26, S27);
_00401194: S27 = DW_OP_const4u(0xD2105517);
_00401199: S26 = DW_OP_xor(S26, S27);
_0040119A: S27 = S26; // DW_OP_dup();
_0040119B: S28 = DW_OP_const1u(0x03);
_0040119D: S27 = DW_OP_shl(S27, S28);
_0040119E: S26 = DW_OP_xor(S26, S27);
_0040119F: S27 = S26; // DW_OP_dup();
_004011A0: S28 = DW_OP_const1u(0x06);
_004011A2: S27 = DW_OP_shl(S27, S28);
_004011A3: DW_OP_swap(S27, S26);
_004011A4: S28 = DW_OP_const1u(0x1A);
_004011A6: S27 = DW_OP_shr(S27, S28);
_004011A7: S26 = DW_OP_or(S26, S27);
_004011A8: S27 = DW_OP_const4u(0xFFFFFFFF);
_004011AD: S26 = DW_OP_and(S26, S27);
_004011AE: S27 = S26; // DW_OP_dup();
_004011AF: S28 = DW_OP_const1u(0x07);
_004011B1: S27 = DW_OP_shl(S27, S28);
_004011B2: S26 = DW_OP_minus(S26, S27);
_004011B3: S27 = DW_OP_const4u(0xFFFFFFFF);
_004011B8: S26 = DW_OP_and(S26, S27);
_004011B9: S27 = S26; // DW_OP_dup();
_004011BA: S28 = S27; // DW_OP_dup();
_004011BB: S29 = DW_OP_const1u(0x02);
_004011BD: S28 = DW_OP_shl(S28, S29);
_004011BE: DW_OP_swap(S28, S27);
_004011BF: S29 = DW_OP_const1u(0x1E);
_004011C1: S28 = DW_OP_shr(S28, S29);
_004011C2: S27 = DW_OP_or(S27, S28);
_004011C3: S28 = DW_OP_const4u(0xFFFFFFFF);
_004011C8: S27 = DW_OP_and(S27, S28);
_004011C9: S26 = DW_OP_minus(S26, S27);
_004011CA: S27 = DW_OP_const4u(0xFFFFFFFF);
_004011CF: S26 = DW_OP_and(S26, S27);
_004011D0: S27 = S26; // DW_OP_dup();
_004011D1: S28 = S27; // DW_OP_dup();
_004011D2: S29 = DW_OP_const1u(0x09);
_004011D4: S28 = DW_OP_shl(S28, S29);
_004011D5: DW_OP_swap(S28, S27);
_004011D6: S29 = DW_OP_const1u(0x17);
_004011D8: S28 = DW_OP_shr(S28, S29);
_004011D9: S27 = DW_OP_or(S27, S28);
_004011DA: S28 = DW_OP_const4u(0xFFFFFFFF);
_004011DF: S27 = DW_OP_and(S27, S28);
_004011E0: S26 = DW_OP_xor(S26, S27);
_004011E1: S27 = S26; // DW_OP_dup();
_004011E2: S28 = S27; // DW_OP_dup();
_004011E3: S29 = DW_OP_const1u(0x06);
_004011E5: S28 = DW_OP_shr(S28, S29);
_004011E6: DW_OP_swap(S28, S27);
_004011E7: S29 = DW_OP_const1u(0x1A);
_004011E9: S28 = DW_OP_shl(S28, S29);
_004011EA: S27 = DW_OP_or(S27, S28);
_004011EB: S28 = DW_OP_const4u(0xFFFFFFFF);
_004011F0: S27 = DW_OP_and(S27, S28);
_004011F1: S26 = DW_OP_plus(S26, S27);
_004011F2: S27 = DW_OP_const4u(0xFFFFFFFF);
_004011F7: S26 = DW_OP_and(S26, S27);
_004011F8: S27 = S26; // DW_OP_dup();
_004011F9: S28 = DW_OP_const1u(0x02);
_004011FB: S27 = DW_OP_shr(S27, S28);
_004011FC: S26 = DW_OP_minus(S26, S27);
_004011FD: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401202: S26 = DW_OP_and(S26, S27);
_00401203: S27 = S26; // DW_OP_dup();
_00401204: S28 = DW_OP_const1u(0x03);
_00401206: S27 = DW_OP_shl(S27, S28);
_00401207: S26 = DW_OP_xor(S26, S27);
_00401208: S27 = S26; // DW_OP_dup();
_00401209: S28 = DW_OP_const1u(0x03);
_0040120B: S27 = DW_OP_shr(S27, S28);
_0040120C: S26 = DW_OP_xor(S26, S27);
_0040120D: S27 = S26; // DW_OP_dup();
_0040120E: S28 = DW_OP_const1u(0x03);
_00401210: S27 = DW_OP_shr(S27, S28);
_00401211: S26 = DW_OP_xor(S26, S27);
_00401212: S27 = S26; // DW_OP_dup();
_00401213: S28 = S27; // DW_OP_dup();
_00401214: S29 = DW_OP_const1u(0x06);
_00401216: S28 = DW_OP_shr(S28, S29);
_00401217: DW_OP_swap(S28, S27);
_00401218: S29 = DW_OP_const1u(0x1A);
_0040121A: S28 = DW_OP_shl(S28, S29);
_0040121B: S27 = DW_OP_or(S27, S28);
_0040121C: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401221: S27 = DW_OP_and(S27, S28);
_00401222: S26 = DW_OP_minus(S26, S27);
_00401223: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401228: S26 = DW_OP_and(S26, S27);
_00401229: S27 = S26; // DW_OP_dup();
_0040122A: S28 = DW_OP_const1u(0x03);
_0040122C: S27 = DW_OP_shr(S27, S28);
_0040122D: DW_OP_swap(S27, S26);
_0040122E: S28 = DW_OP_const1u(0x1D);
_00401230: S27 = DW_OP_shl(S27, S28);
_00401231: S26 = DW_OP_or(S26, S27);
_00401232: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401237: S26 = DW_OP_and(S26, S27);
_00401238: S27 = S26; // DW_OP_dup();
_00401239: S28 = DW_OP_const1u(0x03);
_0040123B: S27 = DW_OP_shl(S27, S28);
_0040123C: S26 = DW_OP_xor(S26, S27);
_0040123D: S27 = S26; // DW_OP_dup();
_0040123E: S28 = DW_OP_const1u(0x06);
_00401240: S27 = DW_OP_shl(S27, S28);
_00401241: DW_OP_swap(S27, S26);
_00401242: S28 = DW_OP_const1u(0x1A);
_00401244: S27 = DW_OP_shr(S27, S28);
_00401245: S26 = DW_OP_or(S26, S27);
_00401246: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040124B: S26 = DW_OP_and(S26, S27);
_0040124C: S27 = S26; // DW_OP_dup();
_0040124D: S28 = DW_OP_const1u(0x02);
_0040124F: S27 = DW_OP_shr(S27, S28);
_00401250: S26 = DW_OP_minus(S26, S27);
_00401251: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401256: S26 = DW_OP_and(S26, S27);
_00401257: S27 = S26; // DW_OP_dup();
_00401258: S28 = S27; // DW_OP_dup();
_00401259: S29 = DW_OP_const1u(0x09);
_0040125B: S28 = DW_OP_shl(S28, S29);
_0040125C: DW_OP_swap(S28, S27);
_0040125D: S29 = DW_OP_const1u(0x17);
_0040125F: S28 = DW_OP_shr(S28, S29);
_00401260: S27 = DW_OP_or(S27, S28);
_00401261: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401266: S27 = DW_OP_and(S27, S28);
_00401267: S26 = DW_OP_xor(S26, S27);
_00401268: S27 = DW_OP_const4u(0xA571689F);
_0040126D: S26 = DW_OP_minus(S26, S27);
_0040126E: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401273: S26 = DW_OP_and(S26, S27);
_00401274: S27 = S26; // DW_OP_dup();
_00401275: S28 = S27; // DW_OP_dup();
_00401276: S29 = DW_OP_const1u(0x02);
_00401278: S28 = DW_OP_shl(S28, S29);
_00401279: DW_OP_swap(S28, S27);
_0040127A: S29 = DW_OP_const1u(0x1E);
_0040127C: S28 = DW_OP_shr(S28, S29);
_0040127D: S27 = DW_OP_or(S27, S28);
_0040127E: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401283: S27 = DW_OP_and(S27, S28);
_00401284: S26 = DW_OP_minus(S26, S27);
_00401285: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040128A: S26 = DW_OP_and(S26, S27);
_0040128B: S27 = S26; // DW_OP_dup();
_0040128C: S28 = DW_OP_const1u(0x02);
_0040128E: S27 = DW_OP_shr(S27, S28);
_0040128F: S26 = DW_OP_minus(S26, S27);
_00401290: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401295: S26 = DW_OP_and(S26, S27);
_00401296: S27 = S26; // DW_OP_dup();
_00401297: S28 = DW_OP_const1u(0x0A);
_00401299: S27 = DW_OP_shr(S27, S28);
_0040129A: S26 = DW_OP_plus(S26, S27);
_0040129B: S27 = DW_OP_const4u(0xFFFFFFFF);
_004012A0: S26 = DW_OP_and(S26, S27);
_004012A1: S27 = S26; // DW_OP_dup();
_004012A2: S28 = S27; // DW_OP_dup();
_004012A3: S29 = DW_OP_const1u(0x02);
_004012A5: S28 = DW_OP_shr(S28, S29);
_004012A6: DW_OP_swap(S28, S27);
_004012A7: S29 = DW_OP_const1u(0x1E);
_004012A9: S28 = DW_OP_shl(S28, S29);
_004012AA: S27 = DW_OP_or(S27, S28);
_004012AB: S28 = DW_OP_const4u(0xFFFFFFFF);
_004012B0: S27 = DW_OP_and(S27, S28);
_004012B1: S26 = DW_OP_xor(S26, S27);
_004012B2: S27 = S26; // DW_OP_dup();
_004012B3: S28 = DW_OP_const1u(0x09);
_004012B5: S27 = DW_OP_shl(S27, S28);
_004012B6: S26 = DW_OP_plus(S26, S27);
_004012B7: S27 = DW_OP_const4u(0xFFFFFFFF);
_004012BC: S26 = DW_OP_and(S26, S27);
_004012BD: S27 = S26; // DW_OP_dup();
_004012BE: S28 = DW_OP_const1u(0x07);
_004012C0: S27 = DW_OP_shl(S27, S28);
_004012C1: S26 = DW_OP_minus(S26, S27);
_004012C2: S27 = DW_OP_const4u(0xFFFFFFFF);
_004012C7: S26 = DW_OP_and(S26, S27);
_004012C8: S27 = S26; // DW_OP_dup();
_004012C9: S28 = DW_OP_const1u(0x06);
_004012CB: S27 = DW_OP_shl(S27, S28);
_004012CC: DW_OP_swap(S27, S26);
_004012CD: S28 = DW_OP_const1u(0x1A);
_004012CF: S27 = DW_OP_shr(S27, S28);
_004012D0: S26 = DW_OP_or(S26, S27);
_004012D1: S27 = DW_OP_const4u(0xFFFFFFFF);
_004012D6: S26 = DW_OP_and(S26, S27);
_004012D7: S27 = S26; // DW_OP_dup();
_004012D8: S28 = DW_OP_const1u(0x06);
_004012DA: S27 = DW_OP_shl(S27, S28);
_004012DB: DW_OP_swap(S27, S26);
_004012DC: S28 = DW_OP_const1u(0x1A);
_004012DE: S27 = DW_OP_shr(S27, S28);
_004012DF: S26 = DW_OP_or(S26, S27);
_004012E0: S27 = DW_OP_const4u(0xFFFFFFFF);
_004012E5: S26 = DW_OP_and(S26, S27);
_004012E6: S27 = S26; // DW_OP_dup();
_004012E7: S28 = S27; // DW_OP_dup();
_004012E8: S29 = DW_OP_const1u(0x06);
_004012EA: S28 = DW_OP_shr(S28, S29);
_004012EB: DW_OP_swap(S28, S27);
_004012EC: S29 = DW_OP_const1u(0x1A);
_004012EE: S28 = DW_OP_shl(S28, S29);
_004012EF: S27 = DW_OP_or(S27, S28);
_004012F0: S28 = DW_OP_const4u(0xFFFFFFFF);
_004012F5: S27 = DW_OP_and(S27, S28);
_004012F6: S26 = DW_OP_plus(S26, S27);
_004012F7: S27 = DW_OP_const4u(0xFFFFFFFF);
_004012FC: S26 = DW_OP_and(S26, S27);
_004012FD: S27 = S26; // DW_OP_dup();
_004012FE: S28 = S27; // DW_OP_dup();
_004012FF: S29 = DW_OP_const1u(0x06);
_00401301: S28 = DW_OP_shr(S28, S29);
_00401302: DW_OP_swap(S28, S27);
_00401303: S29 = DW_OP_const1u(0x1A);
_00401305: S28 = DW_OP_shl(S28, S29);
_00401306: S27 = DW_OP_or(S27, S28);
_00401307: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040130C: S27 = DW_OP_and(S27, S28);
_0040130D: S26 = DW_OP_plus(S26, S27);
_0040130E: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401313: S26 = DW_OP_and(S26, S27);
_00401314: S27 = S26; // DW_OP_dup();
_00401315: S28 = S27; // DW_OP_dup();
_00401316: S29 = DW_OP_const1u(0x09);
_00401318: S28 = DW_OP_shl(S28, S29);
_00401319: DW_OP_swap(S28, S27);
_0040131A: S29 = DW_OP_const1u(0x17);
_0040131C: S28 = DW_OP_shr(S28, S29);
_0040131D: S27 = DW_OP_or(S27, S28);
_0040131E: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401323: S27 = DW_OP_and(S27, S28);
_00401324: S26 = DW_OP_xor(S26, S27);
_00401325: S27 = S26; // DW_OP_dup();
_00401326: S28 = S27; // DW_OP_dup();
_00401327: S29 = DW_OP_const1u(0x06);
_00401329: S28 = DW_OP_shr(S28, S29);
_0040132A: DW_OP_swap(S28, S27);
_0040132B: S29 = DW_OP_const1u(0x1A);
_0040132D: S28 = DW_OP_shl(S28, S29);
_0040132E: S27 = DW_OP_or(S27, S28);
_0040132F: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401334: S27 = DW_OP_and(S27, S28);
_00401335: S26 = DW_OP_plus(S26, S27);
_00401336: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040133B: S26 = DW_OP_and(S26, S27);
_0040133C: S27 = S26; // DW_OP_dup();
_0040133D: S28 = DW_OP_const1u(0x03);
_0040133F: S27 = DW_OP_shl(S27, S28);
_00401340: S26 = DW_OP_xor(S26, S27);
_00401341: S27 = S26; // DW_OP_dup();
_00401342: S28 = DW_OP_const1u(0x09);
_00401344: S27 = DW_OP_shl(S27, S28);
_00401345: S26 = DW_OP_plus(S26, S27);
_00401346: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040134B: S26 = DW_OP_and(S26, S27);
_0040134C: S27 = S26; // DW_OP_dup();
_0040134D: S28 = DW_OP_const1u(0x03);
_0040134F: S27 = DW_OP_shl(S27, S28);
_00401350: S26 = DW_OP_xor(S26, S27);
_00401351: S27 = S26; // DW_OP_dup();
_00401352: S28 = DW_OP_const1u(0x03);
_00401354: S27 = DW_OP_shr(S27, S28);
_00401355: S26 = DW_OP_xor(S26, S27);
_00401356: S27 = S26; // DW_OP_dup();
_00401357: S28 = DW_OP_const1u(0x09);
_00401359: S27 = DW_OP_shl(S27, S28);
_0040135A: S26 = DW_OP_plus(S26, S27);
_0040135B: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401360: S26 = DW_OP_and(S26, S27);
_00401361: S27 = S26; // DW_OP_dup();
_00401362: S28 = S27; // DW_OP_dup();
_00401363: S29 = DW_OP_const1u(0x05);
_00401365: S28 = DW_OP_shl(S28, S29);
_00401366: DW_OP_swap(S28, S27);
_00401367: S29 = DW_OP_const1u(0x1B);
_00401369: S28 = DW_OP_shr(S28, S29);
_0040136A: S27 = DW_OP_or(S27, S28);
_0040136B: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401370: S27 = DW_OP_and(S27, S28);
_00401371: S26 = DW_OP_plus(S26, S27);
_00401372: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401377: S26 = DW_OP_and(S26, S27);
_00401378: S27 = S26; // DW_OP_dup();
_00401379: S28 = DW_OP_const1u(0x06);
_0040137B: S27 = DW_OP_shl(S27, S28);
_0040137C: DW_OP_swap(S27, S26);
_0040137D: S28 = DW_OP_const1u(0x1A);
_0040137F: S27 = DW_OP_shr(S27, S28);
_00401380: S26 = DW_OP_or(S26, S27);
_00401381: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401386: S26 = DW_OP_and(S26, S27);
_00401387: S27 = S26; // DW_OP_dup();
_00401388: S28 = DW_OP_const1u(0x03);
_0040138A: S27 = DW_OP_shr(S27, S28);
_0040138B: S26 = DW_OP_xor(S26, S27);
_0040138C: S27 = S26; // DW_OP_dup();
_0040138D: S28 = DW_OP_const1u(0x09);
_0040138F: S27 = DW_OP_shl(S27, S28);
_00401390: S26 = DW_OP_plus(S26, S27);
_00401391: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401396: S26 = DW_OP_and(S26, S27);
_00401397: S27 = S26; // DW_OP_dup();
_00401398: S28 = S27; // DW_OP_dup();
_00401399: S29 = DW_OP_const1u(0x02);
_0040139B: S28 = DW_OP_shr(S28, S29);
_0040139C: DW_OP_swap(S28, S27);
_0040139D: S29 = DW_OP_const1u(0x1E);
_0040139F: S28 = DW_OP_shl(S28, S29);
_004013A0: S27 = DW_OP_or(S27, S28);
_004013A1: S28 = DW_OP_const4u(0xFFFFFFFF);
_004013A6: S27 = DW_OP_and(S27, S28);
_004013A7: S26 = DW_OP_xor(S26, S27);
_004013A8: S27 = DW_OP_const4u(0xD2105517);
_004013AD: S26 = DW_OP_xor(S26, S27);
_004013AE: S27 = S26; // DW_OP_dup();
_004013AF: S28 = DW_OP_const1u(0x03);
_004013B1: S27 = DW_OP_shr(S27, S28);
_004013B2: S26 = DW_OP_xor(S26, S27);
_004013B3: S27 = S26; // DW_OP_dup();
_004013B4: S28 = DW_OP_const1u(0x03);
_004013B6: S27 = DW_OP_shl(S27, S28);
_004013B7: S26 = DW_OP_xor(S26, S27);
_004013B8: S27 = DW_OP_const4u(0xFF030018);
_004013BD: S26 = DW_OP_plus(S26, S27);
_004013BE: S27 = DW_OP_const4u(0xFFFFFFFF);
_004013C3: S26 = DW_OP_and(S26, S27);
_004013C4: S27 = S26; // DW_OP_dup();
_004013C5: S28 = S27; // DW_OP_dup();
_004013C6: S29 = DW_OP_const1u(0x05);
_004013C8: S28 = DW_OP_shl(S28, S29);
_004013C9: DW_OP_swap(S28, S27);
_004013CA: S29 = DW_OP_const1u(0x1B);
_004013CC: S28 = DW_OP_shr(S28, S29);
_004013CD: S27 = DW_OP_or(S27, S28);
_004013CE: S28 = DW_OP_const4u(0xFFFFFFFF);
_004013D3: S27 = DW_OP_and(S27, S28);
_004013D4: S26 = DW_OP_plus(S26, S27);
_004013D5: S27 = DW_OP_const4u(0xFFFFFFFF);
_004013DA: S26 = DW_OP_and(S26, S27);
_004013DB: S27 = S26; // DW_OP_dup();
_004013DC: S28 = DW_OP_const1u(0x06);
_004013DE: S27 = DW_OP_shl(S27, S28);
_004013DF: DW_OP_swap(S27, S26);
_004013E0: S28 = DW_OP_const1u(0x1A);
_004013E2: S27 = DW_OP_shr(S27, S28);
_004013E3: S26 = DW_OP_or(S26, S27);
_004013E4: S27 = DW_OP_const4u(0xFFFFFFFF);
_004013E9: S26 = DW_OP_and(S26, S27);
_004013EA: S27 = S26; // DW_OP_dup();
_004013EB: S28 = DW_OP_const1u(0x02);
_004013ED: S27 = DW_OP_shr(S27, S28);
_004013EE: S26 = DW_OP_minus(S26, S27);
_004013EF: S27 = DW_OP_const4u(0xFFFFFFFF);
_004013F4: S26 = DW_OP_and(S26, S27);
_004013F5: S27 = S26; // DW_OP_dup();
_004013F6: S28 = DW_OP_const1u(0x0A);
_004013F8: S27 = DW_OP_shr(S27, S28);
_004013F9: S26 = DW_OP_plus(S26, S27);
_004013FA: S27 = DW_OP_const4u(0xFFFFFFFF);
_004013FF: S26 = DW_OP_and(S26, S27);
_00401400: S27 = S26; // DW_OP_dup();
_00401401: S28 = DW_OP_const1u(0x0A);
_00401403: S27 = DW_OP_shr(S27, S28);
_00401404: S26 = DW_OP_plus(S26, S27);
_00401405: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040140A: S26 = DW_OP_and(S26, S27);
_0040140B: S27 = DW_OP_const4u(0xA571689F);
_00401410: S26 = DW_OP_minus(S26, S27);
_00401411: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401416: S26 = DW_OP_and(S26, S27);
_00401417: S27 = S26; // DW_OP_dup();
_00401418: S28 = S27; // DW_OP_dup();
_00401419: S29 = DW_OP_const1u(0x05);
_0040141B: S28 = DW_OP_shl(S28, S29);
_0040141C: DW_OP_swap(S28, S27);
_0040141D: S29 = DW_OP_const1u(0x1B);
_0040141F: S28 = DW_OP_shr(S28, S29);
_00401420: S27 = DW_OP_or(S27, S28);
_00401421: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401426: S27 = DW_OP_and(S27, S28);
_00401427: S26 = DW_OP_plus(S26, S27);
_00401428: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040142D: S26 = DW_OP_and(S26, S27);
_0040142E: S27 = S26; // DW_OP_dup();
_0040142F: S28 = DW_OP_const1u(0x06);
_00401431: S27 = DW_OP_shl(S27, S28);
_00401432: DW_OP_swap(S27, S26);
_00401433: S28 = DW_OP_const1u(0x1A);
_00401435: S27 = DW_OP_shr(S27, S28);
_00401436: S26 = DW_OP_or(S26, S27);
_00401437: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040143C: S26 = DW_OP_and(S26, S27);
_0040143D: S27 = S26; // DW_OP_dup();
_0040143E: S28 = S27; // DW_OP_dup();
_0040143F: S29 = DW_OP_const1u(0x02);
_00401441: S28 = DW_OP_shl(S28, S29);
_00401442: DW_OP_swap(S28, S27);
_00401443: S29 = DW_OP_const1u(0x1E);
_00401445: S28 = DW_OP_shr(S28, S29);
_00401446: S27 = DW_OP_or(S27, S28);
_00401447: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040144C: S27 = DW_OP_and(S27, S28);
_0040144D: S26 = DW_OP_minus(S26, S27);
_0040144E: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401453: S26 = DW_OP_and(S26, S27);
_00401454: S27 = S26; // DW_OP_dup();
_00401455: S28 = S27; // DW_OP_dup();
_00401456: S29 = DW_OP_const1u(0x05);
_00401458: S28 = DW_OP_shl(S28, S29);
_00401459: DW_OP_swap(S28, S27);
_0040145A: S29 = DW_OP_const1u(0x1B);
_0040145C: S28 = DW_OP_shr(S28, S29);
_0040145D: S27 = DW_OP_or(S27, S28);
_0040145E: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401463: S27 = DW_OP_and(S27, S28);
_00401464: S26 = DW_OP_plus(S26, S27);
_00401465: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040146A: S26 = DW_OP_and(S26, S27);
_0040146B: S27 = DW_OP_const4u(0xD2105517);
_00401470: S26 = DW_OP_xor(S26, S27);
_00401471: S27 = S26; // DW_OP_dup();
_00401472: S28 = DW_OP_const1u(0x07);
_00401474: S27 = DW_OP_shl(S27, S28);
_00401475: S26 = DW_OP_minus(S26, S27);
_00401476: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040147B: S26 = DW_OP_and(S26, S27);
_0040147C: S27 = S26; // DW_OP_dup();
_0040147D: S28 = DW_OP_const1u(0x06);
_0040147F: S27 = DW_OP_shl(S27, S28);
_00401480: DW_OP_swap(S27, S26);
_00401481: S28 = DW_OP_const1u(0x1A);
_00401483: S27 = DW_OP_shr(S27, S28);
_00401484: S26 = DW_OP_or(S26, S27);
_00401485: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040148A: S26 = DW_OP_and(S26, S27);
_0040148B: S27 = S26; // DW_OP_dup();
_0040148C: S28 = S27; // DW_OP_dup();
_0040148D: S29 = DW_OP_const1u(0x05);
_0040148F: S28 = DW_OP_shl(S28, S29);
_00401490: DW_OP_swap(S28, S27);
_00401491: S29 = DW_OP_const1u(0x1B);
_00401493: S28 = DW_OP_shr(S28, S29);
_00401494: S27 = DW_OP_or(S27, S28);
_00401495: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040149A: S27 = DW_OP_and(S27, S28);
_0040149B: S26 = DW_OP_plus(S26, S27);
_0040149C: S27 = DW_OP_const4u(0xFFFFFFFF);
_004014A1: S26 = DW_OP_and(S26, S27);
_004014A2: S27 = S26; // DW_OP_dup();
_004014A3: S28 = DW_OP_const1u(0x07);
_004014A5: S27 = DW_OP_shl(S27, S28);
_004014A6: S26 = DW_OP_minus(S26, S27);
_004014A7: S27 = DW_OP_const4u(0xFFFFFFFF);
_004014AC: S26 = DW_OP_and(S26, S27);
_004014AD: S27 = S26; // DW_OP_dup();
_004014AE: S28 = DW_OP_const1u(0x03);
_004014B0: S27 = DW_OP_shr(S27, S28);
_004014B1: S26 = DW_OP_xor(S26, S27);
_004014B2: S27 = DW_OP_const4u(0xD2105517);
_004014B7: S26 = DW_OP_xor(S26, S27);
_004014B8: S27 = S26; // DW_OP_dup();
_004014B9: S28 = DW_OP_const1u(0x03);
_004014BB: S27 = DW_OP_shr(S27, S28);
_004014BC: S26 = DW_OP_xor(S26, S27);
_004014BD: S27 = S26; // DW_OP_dup();
_004014BE: S28 = S27; // DW_OP_dup();
_004014BF: S29 = DW_OP_const1u(0x06);
_004014C1: S28 = DW_OP_shr(S28, S29);
_004014C2: DW_OP_swap(S28, S27);
_004014C3: S29 = DW_OP_const1u(0x1A);
_004014C5: S28 = DW_OP_shl(S28, S29);
_004014C6: S27 = DW_OP_or(S27, S28);
_004014C7: S28 = DW_OP_const4u(0xFFFFFFFF);
_004014CC: S27 = DW_OP_and(S27, S28);
_004014CD: S26 = DW_OP_minus(S26, S27);
_004014CE: S27 = DW_OP_const4u(0xFFFFFFFF);
_004014D3: S26 = DW_OP_and(S26, S27);
_004014D4: S27 = S26; // DW_OP_dup();
_004014D5: S28 = DW_OP_const1u(0x03);
_004014D7: S27 = DW_OP_shr(S27, S28);
_004014D8: DW_OP_swap(S27, S26);
_004014D9: S28 = DW_OP_const1u(0x1D);
_004014DB: S27 = DW_OP_shl(S27, S28);
_004014DC: S26 = DW_OP_or(S26, S27);
_004014DD: S27 = DW_OP_const4u(0xFFFFFFFF);
_004014E2: S26 = DW_OP_and(S26, S27);
_004014E3: S27 = S26; // DW_OP_dup();
_004014E4: S28 = S27; // DW_OP_dup();
_004014E5: S29 = DW_OP_const1u(0x06);
_004014E7: S28 = DW_OP_shr(S28, S29);
_004014E8: DW_OP_swap(S28, S27);
_004014E9: S29 = DW_OP_const1u(0x1A);
_004014EB: S28 = DW_OP_shl(S28, S29);
_004014EC: S27 = DW_OP_or(S27, S28);
_004014ED: S28 = DW_OP_const4u(0xFFFFFFFF);
_004014F2: S27 = DW_OP_and(S27, S28);
_004014F3: S26 = DW_OP_plus(S26, S27);
_004014F4: S27 = DW_OP_const4u(0xFFFFFFFF);
_004014F9: S26 = DW_OP_and(S26, S27);
_004014FA: S27 = S26; // DW_OP_dup();
_004014FB: S28 = S27; // DW_OP_dup();
_004014FC: S29 = DW_OP_const1u(0x06);
_004014FE: S28 = DW_OP_shr(S28, S29);
_004014FF: DW_OP_swap(S28, S27);
_00401500: S29 = DW_OP_const1u(0x1A);
_00401502: S28 = DW_OP_shl(S28, S29);
_00401503: S27 = DW_OP_or(S27, S28);
_00401504: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401509: S27 = DW_OP_and(S27, S28);
_0040150A: S26 = DW_OP_minus(S26, S27);
_0040150B: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401510: S26 = DW_OP_and(S26, S27);
_00401511: S27 = DW_OP_const4u(0xD2105517);
_00401516: S26 = DW_OP_xor(S26, S27);
_00401517: S27 = S26; // DW_OP_dup();
_00401518: S28 = S27; // DW_OP_dup();
_00401519: S29 = DW_OP_const1u(0x02);
_0040151B: S28 = DW_OP_shr(S28, S29);
_0040151C: DW_OP_swap(S28, S27);
_0040151D: S29 = DW_OP_const1u(0x1E);
_0040151F: S28 = DW_OP_shl(S28, S29);
_00401520: S27 = DW_OP_or(S27, S28);
_00401521: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401526: S27 = DW_OP_and(S27, S28);
_00401527: S26 = DW_OP_xor(S26, S27);
_00401528: S27 = DW_OP_const4u(0xA571689F);
_0040152D: S26 = DW_OP_minus(S26, S27);
_0040152E: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401533: S26 = DW_OP_and(S26, S27);
_00401534: S27 = S26; // DW_OP_dup();
_00401535: S28 = DW_OP_const1u(0x0A);
_00401537: S27 = DW_OP_shr(S27, S28);
_00401538: S26 = DW_OP_plus(S26, S27);
_00401539: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040153E: S26 = DW_OP_and(S26, S27);
_0040153F: S27 = S26; // DW_OP_dup();
_00401540: S28 = DW_OP_const1u(0x03);
_00401542: S27 = DW_OP_shl(S27, S28);
_00401543: S26 = DW_OP_xor(S26, S27);
_00401544: S27 = S26; // DW_OP_dup();
_00401545: S28 = S27; // DW_OP_dup();
_00401546: S29 = DW_OP_const1u(0x06);
_00401548: S28 = DW_OP_shr(S28, S29);
_00401549: DW_OP_swap(S28, S27);
_0040154A: S29 = DW_OP_const1u(0x1A);
_0040154C: S28 = DW_OP_shl(S28, S29);
_0040154D: S27 = DW_OP_or(S27, S28);
_0040154E: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401553: S27 = DW_OP_and(S27, S28);
_00401554: S26 = DW_OP_minus(S26, S27);
_00401555: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040155A: S26 = DW_OP_and(S26, S27);
_0040155B: S27 = S26; // DW_OP_dup();
_0040155C: S28 = DW_OP_const1u(0x06);
_0040155E: S27 = DW_OP_shl(S27, S28);
_0040155F: DW_OP_swap(S27, S26);
_00401560: S28 = DW_OP_const1u(0x1A);
_00401562: S27 = DW_OP_shr(S27, S28);
_00401563: S26 = DW_OP_or(S26, S27);
_00401564: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401569: S26 = DW_OP_and(S26, S27);
_0040156A: S27 = S26; // DW_OP_dup();
_0040156B: S28 = S27; // DW_OP_dup();
_0040156C: S29 = DW_OP_const1u(0x09);
_0040156E: S28 = DW_OP_shl(S28, S29);
_0040156F: DW_OP_swap(S28, S27);
_00401570: S29 = DW_OP_const1u(0x17);
_00401572: S28 = DW_OP_shr(S28, S29);
_00401573: S27 = DW_OP_or(S27, S28);
_00401574: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401579: S27 = DW_OP_and(S27, S28);
_0040157A: S26 = DW_OP_xor(S26, S27);
_0040157B: S27 = S26; // DW_OP_dup();
_0040157C: S28 = DW_OP_const1u(0x02);
_0040157E: S27 = DW_OP_shr(S27, S28);
_0040157F: S26 = DW_OP_minus(S26, S27);
_00401580: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401585: S26 = DW_OP_and(S26, S27);
_00401586: S27 = S26; // DW_OP_dup();
_00401587: S28 = DW_OP_const1u(0x03);
_00401589: S27 = DW_OP_shr(S27, S28);
_0040158A: S26 = DW_OP_xor(S26, S27);
_0040158B: S27 = S26; // DW_OP_dup();
_0040158C: S28 = S27; // DW_OP_dup();
_0040158D: S29 = DW_OP_const1u(0x02);
_0040158F: S28 = DW_OP_shl(S28, S29);
_00401590: DW_OP_swap(S28, S27);
_00401591: S29 = DW_OP_const1u(0x1E);
_00401593: S28 = DW_OP_shr(S28, S29);
_00401594: S27 = DW_OP_or(S27, S28);
_00401595: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040159A: S27 = DW_OP_and(S27, S28);
_0040159B: S26 = DW_OP_minus(S26, S27);
_0040159C: S27 = DW_OP_const4u(0xFFFFFFFF);
_004015A1: S26 = DW_OP_and(S26, S27);
_004015A2: S27 = S26; // DW_OP_dup();
_004015A3: S28 = S27; // DW_OP_dup();
_004015A4: S29 = DW_OP_const1u(0x06);
_004015A6: S28 = DW_OP_shr(S28, S29);
_004015A7: DW_OP_swap(S28, S27);
_004015A8: S29 = DW_OP_const1u(0x1A);
_004015AA: S28 = DW_OP_shl(S28, S29);
_004015AB: S27 = DW_OP_or(S27, S28);
_004015AC: S28 = DW_OP_const4u(0xFFFFFFFF);
_004015B1: S27 = DW_OP_and(S27, S28);
_004015B2: S26 = DW_OP_plus(S26, S27);
_004015B3: S27 = DW_OP_const4u(0xFFFFFFFF);
_004015B8: S26 = DW_OP_and(S26, S27);
_004015B9: S27 = DW_OP_const4u(0xFF030018);
_004015BE: S26 = DW_OP_plus(S26, S27);
_004015BF: S27 = DW_OP_const4u(0xFFFFFFFF);
_004015C4: S26 = DW_OP_and(S26, S27);
_004015C5: S27 = S26; // DW_OP_dup();
_004015C6: S28 = S27; // DW_OP_dup();
_004015C7: S29 = DW_OP_const1u(0x06);
_004015C9: S28 = DW_OP_shr(S28, S29);
_004015CA: DW_OP_swap(S28, S27);
_004015CB: S29 = DW_OP_const1u(0x1A);
_004015CD: S28 = DW_OP_shl(S28, S29);
_004015CE: S27 = DW_OP_or(S27, S28);
_004015CF: S28 = DW_OP_const4u(0xFFFFFFFF);
_004015D4: S27 = DW_OP_and(S27, S28);
_004015D5: S26 = DW_OP_plus(S26, S27);
_004015D6: S27 = DW_OP_const4u(0xFFFFFFFF);
_004015DB: S26 = DW_OP_and(S26, S27);
_004015DC: S27 = S26; // DW_OP_dup();
_004015DD: S28 = S27; // DW_OP_dup();
_004015DE: S29 = DW_OP_const1u(0x05);
_004015E0: S28 = DW_OP_shl(S28, S29);
_004015E1: DW_OP_swap(S28, S27);
_004015E2: S29 = DW_OP_const1u(0x1B);
_004015E4: S28 = DW_OP_shr(S28, S29);
_004015E5: S27 = DW_OP_or(S27, S28);
_004015E6: S28 = DW_OP_const4u(0xFFFFFFFF);
_004015EB: S27 = DW_OP_and(S27, S28);
_004015EC: S26 = DW_OP_plus(S26, S27);
_004015ED: S27 = DW_OP_const4u(0xFFFFFFFF);
_004015F2: S26 = DW_OP_and(S26, S27);
_004015F3: S27 = DW_OP_const4u(0xFF030018);
_004015F8: S26 = DW_OP_plus(S26, S27);
_004015F9: S27 = DW_OP_const4u(0xFFFFFFFF);
_004015FE: S26 = DW_OP_and(S26, S27);
_004015FF: S27 = S26; // DW_OP_dup();
_00401600: S28 = S27; // DW_OP_dup();
_00401601: S29 = DW_OP_const1u(0x02);
_00401603: S28 = DW_OP_shl(S28, S29);
_00401604: DW_OP_swap(S28, S27);
_00401605: S29 = DW_OP_const1u(0x1E);
_00401607: S28 = DW_OP_shr(S28, S29);
_00401608: S27 = DW_OP_or(S27, S28);
_00401609: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040160E: S27 = DW_OP_and(S27, S28);
_0040160F: S26 = DW_OP_minus(S26, S27);
_00401610: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401615: S26 = DW_OP_and(S26, S27);
_00401616: S27 = S26; // DW_OP_dup();
_00401617: S28 = DW_OP_const1u(0x03);
_00401619: S27 = DW_OP_shr(S27, S28);
_0040161A: DW_OP_swap(S27, S26);
_0040161B: S28 = DW_OP_const1u(0x1D);
_0040161D: S27 = DW_OP_shl(S27, S28);
_0040161E: S26 = DW_OP_or(S26, S27);
_0040161F: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401624: S26 = DW_OP_and(S26, S27);
_00401625: S27 = S26; // DW_OP_dup();
_00401626: S28 = DW_OP_const1u(0x07);
_00401628: S27 = DW_OP_shl(S27, S28);
_00401629: S26 = DW_OP_minus(S26, S27);
_0040162A: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040162F: S26 = DW_OP_and(S26, S27);
_00401630: S27 = S26; // DW_OP_dup();
_00401631: S28 = DW_OP_const1u(0x07);
_00401633: S27 = DW_OP_shl(S27, S28);
_00401634: S26 = DW_OP_minus(S26, S27);
_00401635: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040163A: S26 = DW_OP_and(S26, S27);
_0040163B: S27 = DW_OP_const4u(0xFF030018);
_00401640: S26 = DW_OP_plus(S26, S27);
_00401641: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401646: S26 = DW_OP_and(S26, S27);
_00401647: S27 = S26; // DW_OP_dup();
_00401648: S28 = DW_OP_const1u(0x09);
_0040164A: S27 = DW_OP_shl(S27, S28);
_0040164B: S26 = DW_OP_plus(S26, S27);
_0040164C: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401651: S26 = DW_OP_and(S26, S27);
_00401652: S27 = S26; // DW_OP_dup();
_00401653: S28 = DW_OP_const1u(0x0A);
_00401655: S27 = DW_OP_shr(S27, S28);
_00401656: S26 = DW_OP_plus(S26, S27);
_00401657: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040165C: S26 = DW_OP_and(S26, S27);
_0040165D: S27 = S26; // DW_OP_dup();
_0040165E: S28 = S27; // DW_OP_dup();
_0040165F: S29 = DW_OP_const1u(0x02);
_00401661: S28 = DW_OP_shr(S28, S29);
_00401662: DW_OP_swap(S28, S27);
_00401663: S29 = DW_OP_const1u(0x1E);
_00401665: S28 = DW_OP_shl(S28, S29);
_00401666: S27 = DW_OP_or(S27, S28);
_00401667: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040166C: S27 = DW_OP_and(S27, S28);
_0040166D: S26 = DW_OP_xor(S26, S27);
_0040166E: S27 = S26; // DW_OP_dup();
_0040166F: S28 = DW_OP_const1u(0x07);
_00401671: S27 = DW_OP_shl(S27, S28);
_00401672: S26 = DW_OP_minus(S26, S27);
_00401673: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401678: S26 = DW_OP_and(S26, S27);
_00401679: S27 = S26; // DW_OP_dup();
_0040167A: S28 = DW_OP_const1u(0x09);
_0040167C: S27 = DW_OP_shl(S27, S28);
_0040167D: S26 = DW_OP_plus(S26, S27);
_0040167E: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401683: S26 = DW_OP_and(S26, S27);
_00401684: S27 = S26; // DW_OP_dup();
_00401685: S28 = S27; // DW_OP_dup();
_00401686: S29 = DW_OP_const1u(0x02);
_00401688: S28 = DW_OP_shr(S28, S29);
_00401689: DW_OP_swap(S28, S27);
_0040168A: S29 = DW_OP_const1u(0x1E);
_0040168C: S28 = DW_OP_shl(S28, S29);
_0040168D: S27 = DW_OP_or(S27, S28);
_0040168E: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401693: S27 = DW_OP_and(S27, S28);
_00401694: S26 = DW_OP_xor(S26, S27);
_00401695: S27 = S26; // DW_OP_dup();
_00401696: S28 = DW_OP_const1u(0x09);
_00401698: S27 = DW_OP_shl(S27, S28);
_00401699: S26 = DW_OP_plus(S26, S27);
_0040169A: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040169F: S26 = DW_OP_and(S26, S27);
_004016A0: S27 = DW_OP_const4u(0xD2105517);
_004016A5: S26 = DW_OP_xor(S26, S27);
_004016A6: S27 = S26; // DW_OP_dup();
_004016A7: S28 = DW_OP_const1u(0x03);
_004016A9: S27 = DW_OP_shl(S27, S28);
_004016AA: S26 = DW_OP_xor(S26, S27);
_004016AB: S27 = S26; // DW_OP_dup();
_004016AC: S28 = DW_OP_const1u(0x02);
_004016AE: S27 = DW_OP_shr(S27, S28);
_004016AF: S26 = DW_OP_minus(S26, S27);
_004016B0: S27 = DW_OP_const4u(0xFFFFFFFF);
_004016B5: S26 = DW_OP_and(S26, S27);
_004016B6: S27 = S26; // DW_OP_dup();
_004016B7: S28 = S27; // DW_OP_dup();
_004016B8: S29 = DW_OP_const1u(0x02);
_004016BA: S28 = DW_OP_shr(S28, S29);
_004016BB: DW_OP_swap(S28, S27);
_004016BC: S29 = DW_OP_const1u(0x1E);
_004016BE: S28 = DW_OP_shl(S28, S29);
_004016BF: S27 = DW_OP_or(S27, S28);
_004016C0: S28 = DW_OP_const4u(0xFFFFFFFF);
_004016C5: S27 = DW_OP_and(S27, S28);
_004016C6: S26 = DW_OP_xor(S26, S27);
_004016C7: S27 = S26; // DW_OP_dup();
_004016C8: S28 = DW_OP_const1u(0x0A);
_004016CA: S27 = DW_OP_shr(S27, S28);
_004016CB: S26 = DW_OP_plus(S26, S27);
_004016CC: S27 = DW_OP_const4u(0xFFFFFFFF);
_004016D1: S26 = DW_OP_and(S26, S27);
_004016D2: S27 = S26; // DW_OP_dup();
_004016D3: S28 = DW_OP_const1u(0x02);
_004016D5: S27 = DW_OP_shr(S27, S28);
_004016D6: S26 = DW_OP_minus(S26, S27);
_004016D7: S27 = DW_OP_const4u(0xFFFFFFFF);
_004016DC: S26 = DW_OP_and(S26, S27);
_004016DD: S27 = S26; // DW_OP_dup();
_004016DE: S28 = DW_OP_const1u(0x09);
_004016E0: S27 = DW_OP_shl(S27, S28);
_004016E1: S26 = DW_OP_plus(S26, S27);
_004016E2: S27 = DW_OP_const4u(0xFFFFFFFF);
_004016E7: S26 = DW_OP_and(S26, S27);
_004016E8: S27 = DW_OP_const4u(0xFF030018);
_004016ED: S26 = DW_OP_plus(S26, S27);
_004016EE: S27 = DW_OP_const4u(0xFFFFFFFF);
_004016F3: S26 = DW_OP_and(S26, S27);
_004016F4: S27 = S26; // DW_OP_dup();
_004016F5: S28 = DW_OP_const1u(0x02);
_004016F7: S27 = DW_OP_shr(S27, S28);
_004016F8: S26 = DW_OP_minus(S26, S27);
_004016F9: S27 = DW_OP_const4u(0xFFFFFFFF);
_004016FE: S26 = DW_OP_and(S26, S27);
_004016FF: S27 = S26; // DW_OP_dup();
_00401700: S28 = DW_OP_const1u(0x07);
_00401702: S27 = DW_OP_shl(S27, S28);
_00401703: S26 = DW_OP_minus(S26, S27);
_00401704: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401709: S26 = DW_OP_and(S26, S27);
_0040170A: S27 = S26; // DW_OP_dup();
_0040170B: S28 = S27; // DW_OP_dup();
_0040170C: S29 = DW_OP_const1u(0x05);
_0040170E: S28 = DW_OP_shl(S28, S29);
_0040170F: DW_OP_swap(S28, S27);
_00401710: S29 = DW_OP_const1u(0x1B);
_00401712: S28 = DW_OP_shr(S28, S29);
_00401713: S27 = DW_OP_or(S27, S28);
_00401714: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401719: S27 = DW_OP_and(S27, S28);
_0040171A: S26 = DW_OP_plus(S26, S27);
_0040171B: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401720: S26 = DW_OP_and(S26, S27);
_00401721: S27 = S26; // DW_OP_dup();
_00401722: S28 = S27; // DW_OP_dup();
_00401723: S29 = DW_OP_const1u(0x09);
_00401725: S28 = DW_OP_shl(S28, S29);
_00401726: DW_OP_swap(S28, S27);
_00401727: S29 = DW_OP_const1u(0x17);
_00401729: S28 = DW_OP_shr(S28, S29);
_0040172A: S27 = DW_OP_or(S27, S28);
_0040172B: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401730: S27 = DW_OP_and(S27, S28);
_00401731: S26 = DW_OP_xor(S26, S27);
_00401732: S27 = S26; // DW_OP_dup();
_00401733: S28 = S27; // DW_OP_dup();
_00401734: S29 = DW_OP_const1u(0x06);
_00401736: S28 = DW_OP_shr(S28, S29);
_00401737: DW_OP_swap(S28, S27);
_00401738: S29 = DW_OP_const1u(0x1A);
_0040173A: S28 = DW_OP_shl(S28, S29);
_0040173B: S27 = DW_OP_or(S27, S28);
_0040173C: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401741: S27 = DW_OP_and(S27, S28);
_00401742: S26 = DW_OP_plus(S26, S27);
_00401743: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401748: S26 = DW_OP_and(S26, S27);
_00401749: S27 = S26; // DW_OP_dup();
_0040174A: S28 = DW_OP_const1u(0x03);
_0040174C: S27 = DW_OP_shl(S27, S28);
_0040174D: S26 = DW_OP_xor(S26, S27);
_0040174E: S27 = DW_OP_const4u(0xFF030018);
_00401753: S26 = DW_OP_plus(S26, S27);
_00401754: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401759: S26 = DW_OP_and(S26, S27);
_0040175A: S27 = DW_OP_const4u(0xA571689F);
_0040175F: S26 = DW_OP_minus(S26, S27);
_00401760: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401765: S26 = DW_OP_and(S26, S27);
_00401766: S27 = S26; // DW_OP_dup();
_00401767: S28 = S27; // DW_OP_dup();
_00401768: S29 = DW_OP_const1u(0x06);
_0040176A: S28 = DW_OP_shr(S28, S29);
_0040176B: DW_OP_swap(S28, S27);
_0040176C: S29 = DW_OP_const1u(0x1A);
_0040176E: S28 = DW_OP_shl(S28, S29);
_0040176F: S27 = DW_OP_or(S27, S28);
_00401770: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401775: S27 = DW_OP_and(S27, S28);
_00401776: S26 = DW_OP_plus(S26, S27);
_00401777: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040177C: S26 = DW_OP_and(S26, S27);
_0040177D: S27 = S26; // DW_OP_dup();
_0040177E: S28 = DW_OP_const1u(0x07);
_00401780: S27 = DW_OP_shl(S27, S28);
_00401781: S26 = DW_OP_minus(S26, S27);
_00401782: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401787: S26 = DW_OP_and(S26, S27);
_00401788: S27 = S26; // DW_OP_dup();
_00401789: S28 = S27; // DW_OP_dup();
_0040178A: S29 = DW_OP_const1u(0x06);
_0040178C: S28 = DW_OP_shr(S28, S29);
_0040178D: DW_OP_swap(S28, S27);
_0040178E: S29 = DW_OP_const1u(0x1A);
_00401790: S28 = DW_OP_shl(S28, S29);
_00401791: S27 = DW_OP_or(S27, S28);
_00401792: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401797: S27 = DW_OP_and(S27, S28);
_00401798: S26 = DW_OP_plus(S26, S27);
_00401799: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040179E: S26 = DW_OP_and(S26, S27);
_0040179F: S27 = S26; // DW_OP_dup();
_004017A0: S28 = S27; // DW_OP_dup();
_004017A1: S29 = DW_OP_const1u(0x02);
_004017A3: S28 = DW_OP_shr(S28, S29);
_004017A4: DW_OP_swap(S28, S27);
_004017A5: S29 = DW_OP_const1u(0x1E);
_004017A7: S28 = DW_OP_shl(S28, S29);
_004017A8: S27 = DW_OP_or(S27, S28);
_004017A9: S28 = DW_OP_const4u(0xFFFFFFFF);
_004017AE: S27 = DW_OP_and(S27, S28);
_004017AF: S26 = DW_OP_xor(S26, S27);
_004017B0: S27 = S26; // DW_OP_dup();
_004017B1: S28 = DW_OP_const1u(0x09);
_004017B3: S27 = DW_OP_shl(S27, S28);
_004017B4: S26 = DW_OP_plus(S26, S27);
_004017B5: S27 = DW_OP_const4u(0xFFFFFFFF);
_004017BA: S26 = DW_OP_and(S26, S27);
_004017BB: S27 = S26; // DW_OP_dup();
_004017BC: S28 = S27; // DW_OP_dup();
_004017BD: S29 = DW_OP_const1u(0x09);
_004017BF: S28 = DW_OP_shl(S28, S29);
_004017C0: DW_OP_swap(S28, S27);
_004017C1: S29 = DW_OP_const1u(0x17);
_004017C3: S28 = DW_OP_shr(S28, S29);
_004017C4: S27 = DW_OP_or(S27, S28);
_004017C5: S28 = DW_OP_const4u(0xFFFFFFFF);
_004017CA: S27 = DW_OP_and(S27, S28);
_004017CB: S26 = DW_OP_xor(S26, S27);
_004017CC: S27 = S26; // DW_OP_dup();
_004017CD: S28 = S27; // DW_OP_dup();
_004017CE: S29 = DW_OP_const1u(0x06);
_004017D0: S28 = DW_OP_shr(S28, S29);
_004017D1: DW_OP_swap(S28, S27);
_004017D2: S29 = DW_OP_const1u(0x1A);
_004017D4: S28 = DW_OP_shl(S28, S29);
_004017D5: S27 = DW_OP_or(S27, S28);
_004017D6: S28 = DW_OP_const4u(0xFFFFFFFF);
_004017DB: S27 = DW_OP_and(S27, S28);
_004017DC: S26 = DW_OP_plus(S26, S27);
_004017DD: S27 = DW_OP_const4u(0xFFFFFFFF);
_004017E2: S26 = DW_OP_and(S26, S27);
_004017E3: S27 = S26; // DW_OP_dup();
_004017E4: S28 = S27; // DW_OP_dup();
_004017E5: S29 = DW_OP_const1u(0x02);
_004017E7: S28 = DW_OP_shr(S28, S29);
_004017E8: DW_OP_swap(S28, S27);
_004017E9: S29 = DW_OP_const1u(0x1E);
_004017EB: S28 = DW_OP_shl(S28, S29);
_004017EC: S27 = DW_OP_or(S27, S28);
_004017ED: S28 = DW_OP_const4u(0xFFFFFFFF);
_004017F2: S27 = DW_OP_and(S27, S28);
_004017F3: S26 = DW_OP_xor(S26, S27);
_004017F4: S27 = S26; // DW_OP_dup();
_004017F5: S28 = DW_OP_const1u(0x02);
_004017F7: S27 = DW_OP_shr(S27, S28);
_004017F8: S26 = DW_OP_minus(S26, S27);
_004017F9: S27 = DW_OP_const4u(0xFFFFFFFF);
_004017FE: S26 = DW_OP_and(S26, S27);
_004017FF: S27 = S26; // DW_OP_dup();
_00401800: S28 = S27; // DW_OP_dup();
_00401801: S29 = DW_OP_const1u(0x09);
_00401803: S28 = DW_OP_shl(S28, S29);
_00401804: DW_OP_swap(S28, S27);
_00401805: S29 = DW_OP_const1u(0x17);
_00401807: S28 = DW_OP_shr(S28, S29);
_00401808: S27 = DW_OP_or(S27, S28);
_00401809: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040180E: S27 = DW_OP_and(S27, S28);
_0040180F: S26 = DW_OP_xor(S26, S27);
_00401810: S27 = S26; // DW_OP_dup();
_00401811: S28 = DW_OP_const1u(0x03);
_00401813: S27 = DW_OP_shl(S27, S28);
_00401814: S26 = DW_OP_xor(S26, S27);
_00401815: S27 = S26; // DW_OP_dup();
_00401816: S28 = DW_OP_const1u(0x03);
_00401818: S27 = DW_OP_shl(S27, S28);
_00401819: S26 = DW_OP_xor(S26, S27);
_0040181A: S27 = DW_OP_const4u(0xA571689F);
_0040181F: S26 = DW_OP_minus(S26, S27);
_00401820: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401825: S26 = DW_OP_and(S26, S27);
_00401826: S27 = DW_OP_const4u(0xFF030018);
_0040182B: S26 = DW_OP_plus(S26, S27);
_0040182C: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401831: S26 = DW_OP_and(S26, S27);
_00401832: S27 = S26; // DW_OP_dup();
_00401833: S28 = DW_OP_const1u(0x03);
_00401835: S27 = DW_OP_shl(S27, S28);
_00401836: S26 = DW_OP_xor(S26, S27);
_00401837: S27 = S26; // DW_OP_dup();
_00401838: S28 = S27; // DW_OP_dup();
_00401839: S29 = DW_OP_const1u(0x06);
_0040183B: S28 = DW_OP_shr(S28, S29);
_0040183C: DW_OP_swap(S28, S27);
_0040183D: S29 = DW_OP_const1u(0x1A);
_0040183F: S28 = DW_OP_shl(S28, S29);
_00401840: S27 = DW_OP_or(S27, S28);
_00401841: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401846: S27 = DW_OP_and(S27, S28);
_00401847: S26 = DW_OP_minus(S26, S27);
_00401848: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040184D: S26 = DW_OP_and(S26, S27);
_0040184E: S27 = S26; // DW_OP_dup();
_0040184F: S28 = DW_OP_const1u(0x09);
_00401851: S27 = DW_OP_shl(S27, S28);
_00401852: S26 = DW_OP_plus(S26, S27);
_00401853: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401858: S26 = DW_OP_and(S26, S27);
_00401859: S27 = DW_OP_const4u(0xD2105517);
_0040185E: S26 = DW_OP_xor(S26, S27);
_0040185F: S27 = S26; // DW_OP_dup();
_00401860: S28 = DW_OP_const1u(0x03);
_00401862: S27 = DW_OP_shr(S27, S28);
_00401863: DW_OP_swap(S27, S26);
_00401864: S28 = DW_OP_const1u(0x1D);
_00401866: S27 = DW_OP_shl(S27, S28);
_00401867: S26 = DW_OP_or(S26, S27);
_00401868: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040186D: S26 = DW_OP_and(S26, S27);
_0040186E: S27 = S26; // DW_OP_dup();
_0040186F: S28 = S27; // DW_OP_dup();
_00401870: S29 = DW_OP_const1u(0x02);
_00401872: S28 = DW_OP_shl(S28, S29);
_00401873: DW_OP_swap(S28, S27);
_00401874: S29 = DW_OP_const1u(0x1E);
_00401876: S28 = DW_OP_shr(S28, S29);
_00401877: S27 = DW_OP_or(S27, S28);
_00401878: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040187D: S27 = DW_OP_and(S27, S28);
_0040187E: S26 = DW_OP_minus(S26, S27);
_0040187F: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401884: S26 = DW_OP_and(S26, S27);
_00401885: S27 = DW_OP_const4u(0xA571689F);
_0040188A: S26 = DW_OP_minus(S26, S27);
_0040188B: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401890: S26 = DW_OP_and(S26, S27);
_00401891: S27 = S26; // DW_OP_dup();
_00401892: S28 = S27; // DW_OP_dup();
_00401893: S29 = DW_OP_const1u(0x06);
_00401895: S28 = DW_OP_shr(S28, S29);
_00401896: DW_OP_swap(S28, S27);
_00401897: S29 = DW_OP_const1u(0x1A);
_00401899: S28 = DW_OP_shl(S28, S29);
_0040189A: S27 = DW_OP_or(S27, S28);
_0040189B: S28 = DW_OP_const4u(0xFFFFFFFF);
_004018A0: S27 = DW_OP_and(S27, S28);
_004018A1: S26 = DW_OP_plus(S26, S27);
_004018A2: S27 = DW_OP_const4u(0xFFFFFFFF);
_004018A7: S26 = DW_OP_and(S26, S27);
_004018A8: S27 = S26; // DW_OP_dup();
_004018A9: S28 = S27; // DW_OP_dup();
_004018AA: S29 = DW_OP_const1u(0x06);
_004018AC: S28 = DW_OP_shr(S28, S29);
_004018AD: DW_OP_swap(S28, S27);
_004018AE: S29 = DW_OP_const1u(0x1A);
_004018B0: S28 = DW_OP_shl(S28, S29);
_004018B1: S27 = DW_OP_or(S27, S28);
_004018B2: S28 = DW_OP_const4u(0xFFFFFFFF);
_004018B7: S27 = DW_OP_and(S27, S28);
_004018B8: S26 = DW_OP_plus(S26, S27);
_004018B9: S27 = DW_OP_const4u(0xFFFFFFFF);
_004018BE: S26 = DW_OP_and(S26, S27);
_004018BF: S27 = S26; // DW_OP_dup();
_004018C0: S28 = DW_OP_const1u(0x07);
_004018C2: S27 = DW_OP_shl(S27, S28);
_004018C3: S26 = DW_OP_minus(S26, S27);
_004018C4: S27 = DW_OP_const4u(0xFFFFFFFF);
_004018C9: S26 = DW_OP_and(S26, S27);
_004018CA: S27 = S26; // DW_OP_dup();
_004018CB: S28 = DW_OP_const1u(0x03);
_004018CD: S27 = DW_OP_shl(S27, S28);
_004018CE: S26 = DW_OP_xor(S26, S27);
_004018CF: S27 = S26; // DW_OP_dup();
_004018D0: S28 = S27; // DW_OP_dup();
_004018D1: S29 = DW_OP_const1u(0x06);
_004018D3: S28 = DW_OP_shr(S28, S29);
_004018D4: DW_OP_swap(S28, S27);
_004018D5: S29 = DW_OP_const1u(0x1A);
_004018D7: S28 = DW_OP_shl(S28, S29);
_004018D8: S27 = DW_OP_or(S27, S28);
_004018D9: S28 = DW_OP_const4u(0xFFFFFFFF);
_004018DE: S27 = DW_OP_and(S27, S28);
_004018DF: S26 = DW_OP_plus(S26, S27);
_004018E0: S27 = DW_OP_const4u(0xFFFFFFFF);
_004018E5: S26 = DW_OP_and(S26, S27);
_004018E6: S27 = S26; // DW_OP_dup();
_004018E7: S28 = S27; // DW_OP_dup();
_004018E8: S29 = DW_OP_const1u(0x02);
_004018EA: S28 = DW_OP_shl(S28, S29);
_004018EB: DW_OP_swap(S28, S27);
_004018EC: S29 = DW_OP_const1u(0x1E);
_004018EE: S28 = DW_OP_shr(S28, S29);
_004018EF: S27 = DW_OP_or(S27, S28);
_004018F0: S28 = DW_OP_const4u(0xFFFFFFFF);
_004018F5: S27 = DW_OP_and(S27, S28);
_004018F6: S26 = DW_OP_minus(S26, S27);
_004018F7: S27 = DW_OP_const4u(0xFFFFFFFF);
_004018FC: S26 = DW_OP_and(S26, S27);
_004018FD: S27 = S26; // DW_OP_dup();
_004018FE: S28 = S27; // DW_OP_dup();
_004018FF: S29 = DW_OP_const1u(0x06);
_00401901: S28 = DW_OP_shr(S28, S29);
_00401902: DW_OP_swap(S28, S27);
_00401903: S29 = DW_OP_const1u(0x1A);
_00401905: S28 = DW_OP_shl(S28, S29);
_00401906: S27 = DW_OP_or(S27, S28);
_00401907: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040190C: S27 = DW_OP_and(S27, S28);
_0040190D: S26 = DW_OP_plus(S26, S27);
_0040190E: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401913: S26 = DW_OP_and(S26, S27);
_00401914: S27 = S26; // DW_OP_dup();
_00401915: S28 = DW_OP_const1u(0x07);
_00401917: S27 = DW_OP_shl(S27, S28);
_00401918: S26 = DW_OP_minus(S26, S27);
_00401919: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040191E: S26 = DW_OP_and(S26, S27);
_0040191F: S27 = S26; // DW_OP_dup();
_00401920: S28 = DW_OP_const1u(0x03);
_00401922: S27 = DW_OP_shl(S27, S28);
_00401923: S26 = DW_OP_xor(S26, S27);
_00401924: S27 = DW_OP_const4u(0xD2105517);
_00401929: S26 = DW_OP_xor(S26, S27);
_0040192A: S27 = S26; // DW_OP_dup();
_0040192B: S28 = DW_OP_const1u(0x02);
_0040192D: S27 = DW_OP_shr(S27, S28);
_0040192E: S26 = DW_OP_minus(S26, S27);
_0040192F: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401934: S26 = DW_OP_and(S26, S27);
_00401935: S27 = DW_OP_const4u(0xD2105517);
_0040193A: S26 = DW_OP_xor(S26, S27);
_0040193B: S27 = DW_OP_const4u(0xA571689F);
_00401940: S26 = DW_OP_minus(S26, S27);
_00401941: S27 = DW_OP_const4u(0xFFFFFFFF);
_00401946: S26 = DW_OP_and(S26, S27);
_00401947: S27 = S26; // DW_OP_dup();
_00401948: S28 = S27; // DW_OP_dup();
_00401949: S29 = DW_OP_const1u(0x06);
_0040194B: S28 = DW_OP_shr(S28, S29);
_0040194C: DW_OP_swap(S28, S27);
_0040194D: S29 = DW_OP_const1u(0x1A);
_0040194F: S28 = DW_OP_shl(S28, S29);
_00401950: S27 = DW_OP_or(S27, S28);
_00401951: S28 = DW_OP_const4u(0xFFFFFFFF);
_00401956: S27 = DW_OP_and(S27, S28);
_00401957: S26 = DW_OP_plus(S26, S27);
_00401958: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040195D: S26 = DW_OP_and(S26, S27);
_0040195E: S27 = DW_OP_const4u(0xD2105517);
_00401963: S26 = DW_OP_xor(S26, S27);
_00401964: S27 = S26; // DW_OP_dup();
_00401965: S28 = DW_OP_const1u(0x07);
_00401967: S27 = DW_OP_shl(S27, S28);
_00401968: S26 = DW_OP_minus(S26, S27);
_00401969: S27 = DW_OP_const4u(0xFFFFFFFF);
_0040196E: S26 = DW_OP_and(S26, S27);
_0040196F: S27 = S26; // DW_OP_dup();
_00401970: S28 = S27; // DW_OP_dup();
_00401971: S29 = DW_OP_const1u(0x02);
_00401973: S28 = DW_OP_shr(S28, S29);
_00401974: DW_OP_swap(S28, S27);
_00401975: S29 = DW_OP_const1u(0x1E);
_00401977: S28 = DW_OP_shl(S28, S29);
_00401978: S27 = DW_OP_or(S27, S28);
_00401979: S28 = DW_OP_const4u(0xFFFFFFFF);
_0040197E: S27 = DW_OP_and(S27, S28);
_0040197F: S26 = DW_OP_xor(S26, S27);
_00401980: goto _004005F0; // DW_OP_skip 0xFFFFEC6D (0x004005F0)
_004005F0: S27 = S24; // DW_OP_pick(S24)
_004005F2: S26 = DW_OP_xor(S26, S27);
_004005F3: S27 = S23; // DW_OP_pick(S23)
_004005F5: S26 = DW_OP_xor(S26, S27);
_004005F6: S27 = S22; // DW_OP_pick(S22)
_004005F8: S28 = S23; // DW_OP_pick(S23)
_004005FA: S29 = DW_OP_const1u(0x20);
_004005FC: S28 = DW_OP_shl(S28, S29);
_004005FD: S27 = DW_OP_or(S27, S28);
_004005FE: DW_OP_rot(S27, S26, S25);
_004005FF: S28 = DW_OP_const1u(0x20);
_00400601: S27 = DW_OP_shl(S27, S28);
_00400602: S26 = DW_OP_or(S26, S27);
_00400603: DW_OP_rot(S26, S25, S24);
_00400604: DW_OP_rot(S26, S25, S24);
_00400605: // DW_OP_drop();
_00400606: DW_OP_rot(S25, S24, S23);
_00400607: DW_OP_rot(S25, S24, S23);
_00400608: // DW_OP_drop();
_00400609: DW_OP_rot(S24, S23, S22);
_0040060A: DW_OP_rot(S24, S23, S22);
_0040060B: // DW_OP_drop();
_0040060C: DW_OP_rot(S23, S22, S21);
_0040060D: DW_OP_rot(S23, S22, S21);
_0040060E: // DW_OP_drop();
_0040060F: DW_OP_rot(S22, S21, S20);
_00400610: DW_OP_rot(S22, S21, S20);
_00400611: // DW_OP_drop();
_00400612: DW_OP_rot(S21, S20, S19);
_00400613: DW_OP_rot(S21, S20, S19);
_00400614: // DW_OP_drop();
_00400615: DW_OP_rot(S20, S19, S18);
_00400616: DW_OP_rot(S20, S19, S18);
_00400617: // DW_OP_drop();
_00400618: DW_OP_rot(S19, S18, S17);
_00400619: DW_OP_rot(S19, S18, S17);
_0040061A: // DW_OP_drop();
_0040061B: DW_OP_swap(S18, S17);
_0040061C: DW_OP_rot(S18, S17, S16);
_0040061D: DW_OP_rot(S18, S17, S16);
_0040061E: // DW_OP_drop();
_0040061F: goto _004003BC; // DW_OP_skip 0xFFFFFD9A (0x004003BC)
_004003BC: DW_OP_rot(S17, S16, S15);
_004003BD: DW_OP_rot(S17, S16, S15);
_004003BE: S18 = S17; // DW_OP_dup();
_004003BF: S19 = S14; // DW_OP_pick(S14)
_004003C1: S18 = DW_OP_minus(S18, S19);
_004003C2: if (S18 != 0) goto _004003C8; //// DW_OP_bra 0x00000003 (0x004003C5, 0x004003C8)
_004003C5: goto _004003CD; // DW_OP_skip 0x00000005 (0x004003CD)
_004003C8: S18 = DW_OP_lit(01);
_004003C9: S17 = DW_OP_plus(S17, S18);
_004003CA: goto _004003B6; // DW_OP_skip 0xFFFFFFE9 (0x004003B6)
_004003CD: // DW_OP_drop();
_004003CE: DW_OP_rot(S16, S15, S14);
_004003CF: DW_OP_rot(S16, S15, S14);
_004003D0: // DW_OP_drop();
_004003D1: DW_OP_swap(S15, S14);
_004003D2: S16 = S12; // DW_OP_pick(S12)
_004003D4: S17 = DW_OP_lit(00);
_004003D5: DW_OP_swap(S17, S16);
_004003D6: S18 = S17; // DW_OP_dup();
_004003D7: S19 = DW_OP_const8u(0x00000000FFFFFFFF);
_004003E0: S18 = DW_OP_and(S18, S19);
_004003E1: DW_OP_swap(S18, S17);
_004003E2: S19 = DW_OP_const8u(0xFFFFFFFF00000000);
_004003EB: S18 = DW_OP_and(S18, S19);
_004003EC: S19 = DW_OP_const1u(0x20);
_004003EE: S18 = DW_OP_shr(S18, S19);
_004003EF: goto _004004E7; // DW_OP_skip 0x000000F5 (0x004004E7)
_004004E7: S19 = S18; // DW_OP_dup();
_004004E8: DW_OP_rot(S19, S18, S17);
_004004E9: S20 = DW_OP_lit(00);
_004004EA: S21 = S20; // DW_OP_dup();
_004004EB: S22 = DW_OP_lit(02);
_004004EC: S21 = DW_OP_mul(S21, S22);
_004004ED: S22 = DW_OP_lit(04);
_004004EE: S21 = DW_OP_mul(S21, S22);
_004004EF: S22 = DW_OP_const8u(0x0000000000400648);
_004004F8: S21 = DW_OP_plus(S21, S22);
_004004F9: S21 = DW_OP_deref_size(4, S21);
_004004FB: DW_OP_swap(S21, S20);
_004004FC: DW_OP_rot(S21, S20, S19);
_004004FD: S20 = DW_OP_plus(S20, S21);
_004004FE: S21 = DW_OP_const4u(0xFFFFFFFF);
_00400503: S20 = DW_OP_and(S20, S21);
_00400504: DW_OP_swap(S20, S19);
_00400505: DW_OP_rot(S20, S19, S18);
_00400506: S19 = DW_OP_xor(S19, S20);
_00400507: S20 = S18; // DW_OP_pick(S18)
_00400509: S21 = DW_OP_lit(02);
_0040050A: S20 = DW_OP_mul(S20, S21);
_0040050B: S21 = DW_OP_lit(01);
_0040050C: S20 = DW_OP_plus(S20, S21);
_0040050D: S21 = DW_OP_lit(04);
_0040050E: S20 = DW_OP_mul(S20, S21);
_0040050F: S21 = DW_OP_const8u(0x0000000000400648);
_00400518: S20 = DW_OP_plus(S20, S21);
_00400519: S20 = DW_OP_deref(S20);
_0040051A: DW_OP_swap(S20, S19);
_0040051B: S21 = S20; // DW_OP_dup();
_0040051C: DW_OP_rot(S21, S20, S19);
_0040051D: S20 = DW_OP_or(S20, S21);
_0040051E: S21 = S17; // DW_OP_pick(S17)
_00400520: S20 = DW_OP_xor(S20, S21);
_00400521: S21 = DW_OP_const1u(0x20);
_00400523: S20 = DW_OP_shl(S20, S21);
_00400524: S19 = DW_OP_or(S19, S20);
_00400525: DW_OP_rot(S19, S18, S17);
_00400526: DW_OP_rot(S19, S18, S17);
_00400527: // DW_OP_drop();
_00400528: S19 = S18; // DW_OP_dup();
_00400529: S20 = DW_OP_const8u(0x00000000FFFFFFFF);
_00400532: S19 = DW_OP_and(S19, S20);
_00400533: DW_OP_swap(S19, S18);
_00400534: S20 = DW_OP_const8u(0xFFFFFFFF00000000);
_0040053D: S19 = DW_OP_and(S19, S20);
_0040053E: S20 = DW_OP_const1u(0x20);
_00400540: S19 = DW_OP_shr(S19, S20);
_00400541: DW_OP_rot(S19, S18, S17);
_00400542: S20 = S17; // DW_OP_pick(S17)
_00400544: DW_OP_rot(S20, S19, S18);
_00400545: DW_OP_rot(S20, S19, S18);
_00400546: S21 = DW_OP_lit(01);
_00400547: S20 = DW_OP_plus(S20, S21);
_00400548: S21 = S20; // DW_OP_dup();
_00400549: S22 = DW_OP_lit(06);
_0040054A: S21 = DW_OP_minus(S21, S22);
_0040054B: if (S21 != 0) goto _004004EA; //// DW_OP_bra 0xFFFFFF9C (0x0040054E, 0x004004EA)
_0040054E: // DW_OP_drop();
_0040054F: // DW_OP_drop();
_00400550: DW_OP_swap(S18, S17);
_00400551: DW_OP_rot(S18, S17, S16);
_00400552: DW_OP_rot(S18, S17, S16);
_00400553: if (S18 != 0) goto _00400559; //// DW_OP_bra 0x00000003 (0x00400556, 0x00400559)
_00400556: goto _004003F2; // DW_OP_skip 0xFFFFFE99 (0x004003F2)
_004003F2: S18 = S13; // DW_OP_pick(S13)
_004003F4: S19 = S18; // DW_OP_dup();
_004003F5: S20 = DW_OP_const8u(0x00000000FFFFFFFF);
_004003FE: S19 = DW_OP_and(S19, S20);
_004003FF: DW_OP_swap(S19, S18);
_00400400: S20 = DW_OP_const8u(0xFFFFFFFF00000000);
_00400409: S19 = DW_OP_and(S19, S20);
_0040040A: S20 = DW_OP_const1u(0x20);
_0040040C: S19 = DW_OP_shr(S19, S20);
_0040040D: goto _00400480; // DW_OP_skip 0x00000070 (0x00400480)
_00400480: S20 = S17; // DW_OP_pick(S17)
_00400482: S19 = DW_OP_xor(S19, S20);
_00400483: DW_OP_swap(S19, S18);
_00400484: S20 = S16; // DW_OP_pick(S16)
_00400486: S19 = DW_OP_xor(S19, S20);
_00400487: S20 = S19; // DW_OP_dup();
_00400488: S21 = DW_OP_const1u(0x04);
_0040048A: S20 = DW_OP_shl(S20, S21);
_0040048B: DW_OP_swap(S20, S19);
_0040048C: S21 = DW_OP_const1u(0x1C);
_0040048E: S20 = DW_OP_shr(S20, S21);
_0040048F: S19 = DW_OP_or(S19, S20);
_00400490: S20 = DW_OP_const4u(0xFFFFFFFF);
_00400495: S19 = DW_OP_and(S19, S20);
_00400496: S20 = S17; // DW_OP_pick(S17)
_00400498: S19 = DW_OP_xor(S19, S20);
_00400499: DW_OP_swap(S19, S18);
_0040049A: S20 = S19; // DW_OP_dup();
_0040049B: S21 = DW_OP_const1u(0x12);
_0040049D: S20 = DW_OP_shr(S20, S21);
_0040049E: DW_OP_swap(S20, S19);
_0040049F: S21 = DW_OP_const1u(0x0E);
_004004A1: S20 = DW_OP_shl(S20, S21);
_004004A2: S19 = DW_OP_or(S19, S20);
_004004A3: S20 = DW_OP_const4u(0xFFFFFFFF);
_004004A8: S19 = DW_OP_and(S19, S20);
_004004A9: S20 = S16; // DW_OP_pick(S16)
_004004AB: S19 = DW_OP_xor(S19, S20);
_004004AC: DW_OP_rot(S19, S18, S17);
_004004AD: DW_OP_rot(S19, S18, S17);
_004004AE: // DW_OP_drop();
_004004AF: DW_OP_rot(S18, S17, S16);
_004004B0: DW_OP_rot(S18, S17, S16);
_004004B1: // DW_OP_drop();
_004004B2: goto _00400410; // DW_OP_skip 0xFFFFFF5B (0x00400410)
_00400410: S18 = DW_OP_const1u(0x20);
_00400412: S17 = DW_OP_shl(S17, S18);
_00400413: S16 = DW_OP_or(S16, S17);
_00400414: S15 = DW_OP_xor(S15, S16);
_00400415: DW_OP_rot(S15, S14, S13);
_00400416: DW_OP_rot(S15, S14, S13);
_00400417: // DW_OP_drop();
_00400418: S15 = S14; // DW_OP_dup();
_00400419: DW_OP_rot(S15, S14, S13);
_0040041A: S16 = DW_OP_lit(01);
_0040041B: DW_OP_swap(S16, S15);
_0040041C: S17 = S16; // DW_OP_dup();
_0040041D: S18 = DW_OP_const8u(0x00000000FFFFFFFF);
_00400426: S17 = DW_OP_and(S17, S18);
_00400427: DW_OP_swap(S17, S16);
_00400428: S18 = DW_OP_const8u(0xFFFFFFFF00000000);
_00400431: S17 = DW_OP_and(S17, S18);
_00400432: S18 = DW_OP_const1u(0x20);
_00400434: S17 = DW_OP_shr(S17, S18);
_00400435: goto _004004E7; // DW_OP_skip 0x000000AF (0x004004E7)
_00400559: goto _00400438; // DW_OP_skip 0xFFFFFEDC (0x00400438)
_00400438: S18 = S13; // DW_OP_pick(S13)
_0040043A: S19 = S18; // DW_OP_dup();
_0040043B: S20 = DW_OP_const8u(0x00000000FFFFFFFF);
_00400444: S19 = DW_OP_and(S19, S20);
_00400445: DW_OP_swap(S19, S18);
_00400446: S20 = DW_OP_const8u(0xFFFFFFFF00000000);
_0040044F: S19 = DW_OP_and(S19, S20);
_00400450: S20 = DW_OP_const1u(0x20);
_00400452: S19 = DW_OP_shr(S19, S20);
_00400453: goto _004004B5; // DW_OP_skip 0x0000005F (0x004004B5)
_004004B5: DW_OP_swap(S19, S18);
_004004B6: S20 = S17; // DW_OP_pick(S17)
_004004B8: S19 = DW_OP_xor(S19, S20);
_004004B9: S20 = S19; // DW_OP_dup();
_004004BA: S21 = DW_OP_const1u(0x1A);
_004004BC: S20 = DW_OP_shl(S20, S21);
_004004BD: DW_OP_swap(S20, S19);
_004004BE: S21 = DW_OP_const1u(0x06);
_004004C0: S20 = DW_OP_shr(S20, S21);
_004004C1: S19 = DW_OP_or(S19, S20);
_004004C2: S20 = DW_OP_const4u(0xFFFFFFFF);
_004004C7: S19 = DW_OP_and(S19, S20);
_004004C8: DW_OP_swap(S19, S18);
_004004C9: S20 = S16; // DW_OP_pick(S16)
_004004CB: S19 = DW_OP_xor(S19, S20);
_004004CC: S20 = S17; // DW_OP_pick(S17)
_004004CE: S19 = DW_OP_xor(S19, S20);
_004004CF: S20 = S19; // DW_OP_dup();
_004004D0: S21 = DW_OP_const1u(0x0E);
_004004D2: S20 = DW_OP_shr(S20, S21);
_004004D3: DW_OP_swap(S20, S19);
_004004D4: S21 = DW_OP_const1u(0x12);
_004004D6: S20 = DW_OP_shl(S20, S21);
_004004D7: S19 = DW_OP_or(S19, S20);
_004004D8: S20 = DW_OP_const4u(0xFFFFFFFF);
_004004DD: S19 = DW_OP_and(S19, S20);
_004004DE: DW_OP_rot(S19, S18, S17);
_004004DF: DW_OP_rot(S19, S18, S17);
_004004E0: // DW_OP_drop();
_004004E1: DW_OP_rot(S18, S17, S16);
_004004E2: DW_OP_rot(S18, S17, S16);
_004004E3: // DW_OP_drop();
_004004E4: goto _00400456; // DW_OP_skip 0xFFFFFF6F (0x00400456)
_00400456: S18 = DW_OP_const1u(0x20);
_00400458: S17 = DW_OP_shl(S17, S18);
_00400459: S16 = DW_OP_or(S16, S17);
_0040045A: S15 = DW_OP_xor(S15, S16);
_0040045B: DW_OP_rot(S15, S14, S13);
_0040045C: DW_OP_rot(S15, S14, S13);
_0040045D: // DW_OP_drop();
_0040045E: DW_OP_rot(S14, S13, S12);
_0040045F: DW_OP_rot(S14, S13, S12);
_00400460: S15 = DW_OP_lit(01);
_00400461: S14 = DW_OP_plus(S14, S15);
_00400462: DW_OP_rot(S14, S13, S12);
_00400463: DW_OP_swap(S14, S13);
_00400464: S15 = S12; // DW_OP_pick(S12)
_00400466: S16 = DW_OP_lit(15);
_00400467: S15 = DW_OP_minus(S15, S16);
_00400468: if (S15 != 0) goto _004003AC; //// DW_OP_bra 0xFFFFFF41 (0x0040046B, 0x004003AC)
_0040046B: DW_OP_rot(S14, S13, S12);
_0040046C: DW_OP_rot(S14, S13, S12);
_0040046D: // DW_OP_drop();
_0040046E: DW_OP_rot(S13, S12, S11);
_0040046F: DW_OP_rot(S13, S12, S11);
_00400470: // DW_OP_drop();
_00400471: DW_OP_rot(S12, S11, S10);
_00400472: DW_OP_rot(S12, S11, S10);
_00400473: // DW_OP_drop();
_00400474: DW_OP_swap(S11, S10);
_00400475: DW_OP_rot(S11, S10, S9);
_00400476: DW_OP_rot(S11, S10, S9);
_00400477: if (S11 != 0) goto _0040047D; //// DW_OP_bra 0x00000003 (0x0040047A, 0x0040047D)
_0040047A: goto _004002DF; // DW_OP_skip 0xFFFFFE62 (0x004002DF)
_004002DF: DW_OP_rot(S10, S9, S8);
_004002E0: DW_OP_rot(S10, S9, S8);
_004002E1: // DW_OP_drop();
_004002E2: DW_OP_rot(S9, S8, S7);
_004002E3: DW_OP_rot(S9, S8, S7);
_004002E4: // DW_OP_drop();
_004002E5: S9 = DW_OP_lit(01);
_004002E6: S10 = S7; // DW_OP_pick(S7)
_004002E8: S11 = S8; // DW_OP_pick(S8)
_004002EA: goto _0040030B; // DW_OP_skip 0x0000001E (0x0040030B)
_0040047D: goto _004002F4; // DW_OP_skip 0xFFFFFE74 (0x004002F4)
_004002F4: DW_OP_rot(S10, S9, S8);
_004002F5: DW_OP_rot(S10, S9, S8);
_004002F6: S11 = S7; // DW_OP_pick(S7)
_004002F8: DW_OP_swap(S11, S10);
_004002F9: S12 = S6; // DW_OP_pick(S6)
_004002FB: S13 = DW_OP_lit(01);
_004002FC: S12 = DW_OP_plus(S12, S13);
_004002FD: S13 = S12; // DW_OP_dup();
_004002FE: S14 = DW_OP_lit(04);
_004002FF: S13 = DW_OP_minus(S13, S14);
_00400300: if (S13 != 0) goto _004002CF; //// DW_OP_bra 0xFFFFFFCC (0x00400303, 0x004002CF)
_00400303: // DW_OP_drop();
_00400304: S12 = S8; // DW_OP_pick(S8)
_00400306: S13 = S9; // DW_OP_pick(S9)
_00400308: goto _00400285; // DW_OP_skip 0xFFFFFF7A (0x00400285)
_00400285: S14 = DW_OP_const8u(0x658302A68E8E1C24);
_0040028E: S13 = DW_OP_xor(S13, S14);
_0040028F: DW_OP_swap(S13, S12);
_00400290: S14 = DW_OP_const8u(0xDC7564F1612E5347);
_00400299: S13 = DW_OP_xor(S13, S14);
_0040029A: S12 = DW_OP_plus(S12, S13);
_0040029B: DW_OP_swap(S12, S11);
_0040029C: S13 = DW_OP_const8u(0xD9C69B74A86EC613);
_004002A5: S12 = DW_OP_xor(S12, S13);
_004002A6: S11 = DW_OP_plus(S11, S12);
_004002A7: DW_OP_swap(S11, S10);
_004002A8: S12 = DW_OP_const8u(0x65850B36E76AAED5);
_004002B1: S11 = DW_OP_xor(S11, S12);
_004002B2: S10 = DW_OP_plus(S10, S11);
_004002B3: if (S10 != 0) goto _004002C2; //// DW_OP_bra 0x0000000C (0x004002B6, 0x004002C2)
_004002B6: S10 = DW_OP_const8u(0x0000000000403098);
//_004002BF: goto _004082C1; // DW_OP_skip 0x00007FFF (0x004082C1)


return 0x00403098;
};


int main(void) {
	MappedBinaryImageBase = (uint64_t)decrypted_file;
	//BinaryEnd = (uint64_t)decrypted_file + decrypted_file_len;

	//SSTIC{a947d6980ccf7b87cb8d7c246} <= Example key
// Build up flag
// 25 chars huma readable
	char FlagInner[] = "A11111112222222233333333Z";
	//klee_make_symbolic(FlagInner, 25, "InnerFlag");
	for (int i = 0; i < 25; i++) {
		if (FlagInner[i] >= '0' && FlagInner[i] <= '9')
			continue;

		if (FlagInner[i] >= 'a' && FlagInner[i] <= 'z')
			continue;

		if (FlagInner[i] >= 'A' && FlagInner[i] <= 'Z')
			continue;

		//printf("Wrong Input!\n");
		exit(1);
	}

	char Flag[] = "SSTIC{1111111122222222333333334}";
	memcpy(Flag + 6, FlagInner, 25);

	// Trigger error
	//char Flag[] = "SSTIC{11111111222222223333333344}";

	uint64_t * SimArgv[2];
	SimArgv[0] = (uint64_t*)0x1111111111111111;
	SimArgv[1] = (uint64_t*)Flag;

	// Set reg values
	uint64_t * *ppArgv = (uint64_t * *)& SimArgv;
	StackRegister = (uint64_t)& ppArgv; // 0x0000FFFFFFFFFB20;
	StackRegister =
		(uint64_t)(((uint64_t)StackRegister) - 0xA8); // Stack -0xA8 ;

	uint64_t Result = VM_Func();
	printf("Result %llX\n", Result);
	return 0;
}